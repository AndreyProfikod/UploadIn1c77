#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    Если НЕ ЗначениеЗаполнено(Объект.НачалоПериода) Тогда
		Объект.НачалоПериода = НачалоМесяца(ТекущаяДата());		
		Объект.КонецПериода = КонецМесяца(ТекущаяДата());		
	КонецЕсли;
	ЗаполнитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 

	ПолучитьСписокИБ();

	ЗаполнитьРеализации(); 
	
//	ПрочитатьДанныеИз77("");

КонецПроцедуры
#КонецОбласти   

#Область ОбработчикиКомандФормы   
&НаСервере
Процедура УстановитьОтметкуВсеНаСервере(ТекущаяСтраница, Действие)
	Если ТекущаяСтраница = "ГруппаРеализации" Тогда    
		Для каждого СтрТаб Из СписокРеализаций Цикл
			СтрТаб.Пометка = Действие;	
		КонецЦикла; 
	ИначеЕсли ТекущаяСтраница = "ГруппаРасшифровкаПП" Тогда
		Для каждого СтрТаб Из СписокРасшифровкаПП Цикл
			СтрТаб.Пометка = Действие;	
		КонецЦикла; 
	ИначеЕсли ТекущаяСтраница = "ГруппаПоступлениеУслуг" Тогда
		Для каждого СтрТаб Из СписокПоступленийУслуг Цикл
			СтрТаб.Пометка = Действие;	
		КонецЦикла; 
	ИначеЕсли ТекущаяСтраница = "ГруппаБанковскиеВыписки" Тогда
		Для каждого СтрТаб Из СписокБанковскиеВыписки Цикл
			СтрТаб.Пометка = Действие;	
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеализацийОтметитьВсе(Команда)
	УстановитьОтметкуВсеНаСервере(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РеализацийСнятьВсе(Команда)
	УстановитьОтметкуВсеНаСервере(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДвижения(Команда)
	
	СтандартнаяОбработка = Ложь; 
	
	ТекущаяСтраница = Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя;
	Если ТекущаяСтраница = "ГруппаРеализации" Тогда    
		ТД = Элементы.СписокРеализаций.ТекущиеДанные;
	ИначеЕсли ТекущаяСтраница = "ГруппаРасшифровкаПП" Тогда
	ИначеЕсли ТекущаяСтраница = "ГруппаБанковскиеВыписки" Тогда
		ТД = Элементы.СписокБанковскиеВыписки.ТекущиеДанные;
	ИначеЕсли ТекущаяСтраница = "ГруппаПоступлениеУслуг" Тогда
		ТД = Элементы.СписокПоступленийУслуг.ТекущиеДанные;
	КонецЕсли;
	Если ТД<>Неопределено Тогда
		ПарФормы = Новый Структура;
		ПарФормы.Вставить("ДокументДвижений",ТД.Ссылка);    
		ОткрытьФорму("Обработка.КорректировкаДвижений.Форма",ПарФормы,ЭтаФорма);	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы
&НаКлиенте
Процедура База77ПриИзменении(Элемент)

	МассивСтрок = ТаблицаПути.НайтиСтроки(Новый Структура("Путь", База77));
	Если МассивСтрок.Количество() > 0 Тогда
		Пароль77 = МассивСтрок[0].Пароль;
		Пользователь77 = МассивСтрок[0].Пользователь;
	КонецЕсли; 
	
	ПрочитатьДанныеИз77("");

КонецПроцедуры

&НаКлиенте
Процедура ДатаСПриИзменении(Элемент)   
	ЗаполнитьСписокДокументов(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоПриИзменении(Элемент)
	ЗаполнитьСписокДокументов(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВыбОрганизацияПриИзменении(Элемент)
	ЗаполнитьСписокДокументов(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВыбКонтрагентПриИзменении(Элемент)
	ЗаполнитьСписокДокументов(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();                                 
	Диалог.Период = Новый СтандартныйПериод(Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте                                                                                             
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НачалоПериода  = РезультатВыбора.ДатаНачала;
	Объект.КонецПериода = РезультатВыбора.ДатаОкончания;
	
	ЗаполнитьСписокДокументов(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРасшифровкаППВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СписокРасшифровкаПП.ТекущиеДанные;
	Если ТД<>Неопределено Тогда
		
		ПарФормы = Новый Структура;
		ПарФормы.Вставить("Ключ",ТД.Ссылка);
		ОткрытьФорму("Документ.РасшифровкаПлатежногоПоручения.ФормаОбъекта",ПарФормы,ЭтаФорма);	
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокРеализацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СписокРеализаций.ТекущиеДанные;
	Если ТД<>Неопределено Тогда
		
		ПарФормы = Новый Структура;
		ПарФормы.Вставить("Ключ",ТД.Ссылка);
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.ФормаОбъекта",ПарФормы,ЭтаФорма);	
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокБанковскиеВыпискиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СписокБанковскиеВыписки.ТекущиеДанные;
	Если ТД<>Неопределено Тогда
		
		ПарФормы = Новый Структура;
		ПарФормы.Вставить("Ключ",ТД.Ссылка);    
		Если ТД.Поступление>0 Тогда
			ОткрытьФорму("Документ.ПоступлениеНаРасчетныйСчет.ФормаОбъекта",ПарФормы,ЭтаФорма);	
		иначе	
			ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.ФормаОбъекта",ПарФормы,ЭтаФорма);	
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПоступленийУслугВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СписокПоступленийУслуг.ТекущиеДанные;
	Если ТД<>Неопределено Тогда
		
		ПарФормы = Новый Структура;
		ПарФормы.Вставить("Ключ",ТД.Ссылка);
		ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.ФормаОбъекта",ПарФормы,ЭтаФорма);	
	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ЗаполнитьСписокДокументов(ТекущаяСтраница.Имя);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиВыгрузкиВ7ку

#Область Реализация 
 
&НаКлиенте
Процедура ВыгрузитьДокументы(Команда) 

	ОчиститьСообщения();
	
	БазаOLE = ПодключитьБазу77();
	
	Если БазаOLE = Неопределено Тогда
		Сообщить("Не удалось подключиться к базе 1с7");  
		Возврат;
	Иначе
		Состояние("База 1с7 подключена");
	КонецЕсли;

	ТабДокументов = ПодготовитьСписокДокументовДляВыгрузкиНаСервере();

	Для каждого СтрДокумент Из ТабДокументов Цикл
		
		Если ПроверитьПризнакДокументВыгружен(СтрДокумент) Тогда
			Сообщить("Документ "+СтрДокумент+ " уже выгружен в базу 1С77!");  
			Продолжить;			
		КонецЕсли;

		Отказ = Ложь; 
		СтруктураДанных = Новый Структура; 
		СтруктураДанных.Вставить("БазаOLE", 			БазаOLE);
		СтруктураДанных.Вставить("ДокументРеализации", 	СтрДокумент);
		
		ПодготовитьДанныеДляВыгрузки(СтруктураДанных, Отказ);
		Если Не Отказ Тогда
			
			ВыгрузитьДокументыПродолжение(СтруктураДанных); 
		
			ИзменитьПризнакДокументВыгружен(СтрДокумент, СтруктураДанных.РеализацияНомер, СтруктураДанных.РеализацияДата);
		
			Сообщить("Документ выгружен успешно! В 1С 7 создан документ №" + СтруктураДанных.РеализацияНомер + " от " + СтруктураДанных.РеализацияДата);
	    КонецЕсли;
	
	КонецЦикла;     
	
	ЗаполнитьСписокДокументов(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);
	
КонецПроцедуры   

&НаКлиенте
Процедура ВыгрузитьДокументыПродолжение(СтруктураДанных)
	
	OLE_ОказаниеУслуг = СтруктураДанных.OLE_ОказаниеУслуг;
	OLE_Фирма    = СтруктураДанных.ФирмаОтбора77;
	OLE_Счет     = СтруктураДанных.OLE_Счет;
	
	Контрагент = СтруктураДанных.Контрагент77; 
	Договор    = СтруктураДанных.Договор77; 
	
	мДокументРеализации = СтруктураДанных.ДокументРеализации;
	
	мНомер = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументРеализации, "Номер"));
	Если СтрДлина(мНомер)>10 Тогда
		мНомер = СтрЗаменить(мНомер,"-0","-");
	КонецЕсли;
	//Если СтруктураДанных.OLE_ОказаниеУслуг.НайтиПоНомеру(мНомер, ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументРеализации, "Дата")) = 1 Тогда
	//	
	//	Сообщить("В базе 1С77 уже есть документ с номером "+мНомер);  
	//	Возврат;
	//	
	//КонецЕсли;

	// Создадим документ 
	OLE_ОказаниеУслуг.Новый();  
	OLE_ОказаниеУслуг.НомерДок      = мНомер;   
	OLE_ОказаниеУслуг.Номер         = Число(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(OLE_ОказаниеУслуг.НомерДок, Истина, Истина));   
	
	OLE_ОказаниеУслуг.ДатаДок       = ПолучитьЗначениеРеквизитаНаСервере(мДокументРеализации, "Дата"); 
	OLE_ОказаниеУслуг.Фирма         = OLE_Фирма;  
	OLE_ОказаниеУслуг.Журнал        = "13";
	OLE_ОказаниеУслуг.ЖурналФирма   = OLE_ОказаниеУслуг.Журнал + Формат(OLE_Фирма.Код, "ЧЦ=2; ЧВН=") + "00";
	OLE_ОказаниеУслуг.ЖурналКлиент  = OLE_ОказаниеУслуг.Журнал + "01" + Контрагент.Код;
	
	OLE_ОказаниеУслуг.Контрагент    = Контрагент;
	OLE_ОказаниеУслуг.Договор       = ?(Договор = Неопределено, Неопределено, Договор);
	OLE_ОказаниеУслуг.Курс          = 1;
	
	//OLE_ПриходныйОрдер.ДатаНомерСчетаФактуры = ЗаполнитьДатаНомерСчетаФактуры();
	//OLE_ПриходныйОрдер.ДатаНомерНакладной    = OLE_ПриходныйОрдер.ДатаНомерСчетаФактуры;
	//
	//OLE_ПриходныйОрдер.НДСвключатьВСтоимость = НДСВключенВСтоимость; 
	OLE_ОказаниеУслуг.ВариантРасчетаНалогов = СтруктураДанных.ВариантРасчетаНалога77; 
	OLE_ОказаниеУслуг.Комментарий           = "#Загружено из 1С8 по документу Реализация №" + ПолучитьЗначениеРеквизитаНаСервере(мДокументРеализации, "Номер") + " от " + Формат(ПолучитьЗначениеРеквизитаНаСервере(мДокументРеализации, "Дата"), "ДФ=dd.MM.yyyy");
	
	Для каждого СтрМассива Из СтруктураДанных.МассивСтрок Цикл
		
		OLE_ОказаниеУслуг.НоваяСтрока();
		OLE_ОказаниеУслуг.Услуга 				= СтрМассива.Услуга; 
		OLE_ОказаниеУслуг.НаименованиеУслуги 	= СтрМассива.НаименованиеУслуги; 
		OLE_ОказаниеУслуг.Количество 			= СтрМассива.Количество; 
		OLE_ОказаниеУслуг.Цена       			= СтрМассива.Цена; 
		OLE_ОказаниеУслуг.Сумма      			= СтрМассива.Сумма;  
		OLE_ОказаниеУслуг.НДС        			= СтрМассива.НДС; 
		OLE_ОказаниеУслуг.Всего      			= СтрМассива.Всего; 
		
	КонецЦикла;
	
	
	OLE_ОказаниеУслуг.Записать();
	
	Попытка
	    OLE_ОказаниеУслуг.Провести();
	Исключение
	   Сообщить("Ошибка проведения в 1с7 Реализация №" + OLE_ОказаниеУслуг.Номер + " от " + Формат(OLE_ОказаниеУслуг.ДатаДок, "ДФ=dd.MM.yyyy") + ". Попробуйте провести в 1с7 этот документ вручную!");
	КонецПопытки;

	СтруктураДанных.Вставить("РеализацияНомер", OLE_ОказаниеУслуг.НомерДок);
	СтруктураДанных.Вставить("РеализацияДата", OLE_ОказаниеУслуг.ДатаДок);	
	
КонецПроцедуры                      
	
&НаКлиенте
Процедура ПодготовитьДанныеДляВыгрузки(СтруктураДанных, Отказ) Экспорт 
	
	Попытка
		//СтруктураДанных.Вставить("БазаOLE",              БазаOLE); 
		СтруктураДанных.Вставить("OLE_Контрагенты",      СтруктураДанных.БазаOLE.CreateObject("Справочник.Контрагенты"));
		СтруктураДанных.Вставить("OLE_СпрДоговоры",      СтруктураДанных.БазаOLE.CreateObject("Справочник.Договоры"));  
		СтруктураДанных.Вставить("OLE_СпрВариантыНДС",   СтруктураДанных.БазаOLE.CreateObject("Справочник.ВариантыРасчетаНалогов")); 
		СтруктураДанных.Вставить("OLE_Номенклатура",  	 СтруктураДанных.БазаOLE.CreateObject("Справочник.Номенклатура")); 
		СтруктураДанных.Вставить("OLE_ДокОперация",      СтруктураДанных.БазаOLE.CreateObject("Документ.Операция"));  
		СтруктураДанных.Вставить("OLE_Операция",         СтруктураДанных.БазаOLE.CreateObject("Операция"));  
		СтруктураДанных.Вставить("OLE_СпрФирмы", 		 СтруктураДанных.БазаOLE.CreateObject("Справочник.Фирмы"));
		СтруктураДанных.Вставить("OLE_Счет",             СтруктураДанных.БазаOLE.CreateObject("Счет"));  
		СтруктураДанных.Вставить("OLE_ОказаниеУслуг",    СтруктураДанных.БазаOLE.CreateObject("Документ.ОказаниеУслуг"));
		
		мНомер = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументРеализации, "Номер"));	
		Если СтрДлина(мНомер)>10 Тогда
			мНомер = СтрЗаменить(мНомер,"-0","-");
		КонецЕсли;
		Если СтруктураДанных.OLE_ОказаниеУслуг.НайтиПоНомеру(мНомер, ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументРеализации, "Дата")) = 1 Тогда
			ИзменитьПризнакДокументВыгружен(СтруктураДанных.ДокументРеализации, мНомер, ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументРеализации, "Дата"));
			Отказ = Истина;
			Сообщить("В базе 1С77 уже есть документ с номером "+мНомер);  
			Возврат;
			
		КонецЕсли;
		
		// Фирма
		мОрганизация = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументРеализации, "Организация");
		ОрганизацияИНН = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(мОрганизация, "ИНН"));
		Если СтруктураДанных.OLE_СпрФирмы.НайтиПоРеквизиту("ИНН", ОрганизацияИНН) <> 0 Тогда
			ФирмаОтбора77 = СтруктураДанных.OLE_СпрФирмы.ТекущийЭлемент();
		Иначе
			Сообщить("Организация " + мОрганизация + " в 1с7 не найдена!");  
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		СтруктураДанных.Вставить("ФирмаОтбора77", ФирмаОтбора77);
		
		// Контрагент
		Контрагент = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументРеализации, "Контрагент");
		КонтрагентИНН = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(Контрагент, "ИНН"));
		Если СтруктураДанных.OLE_Контрагенты.НайтиПоРеквизиту("ИНН", КонтрагентИНН, 1) <> 0 Тогда
			Контрагент77 = СтруктураДанных.OLE_Контрагенты.ТекущийЭлемент();
		Иначе
			Сообщить("Контрагент " + Контрагент + " с ИНН " + КонтрагентИНН + " в 1с7 не найден!");  
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		СтруктураДанных.Вставить("Контрагент77", Контрагент77);
		
		// Договор
		OLE_СпрДоговоры = СтруктураДанных.OLE_СпрДоговоры;
		OLE_СпрДоговоры.ИспользоватьВладельца(Контрагент77);  
		
		Договор = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументРеализации, "ДоговорКонтрагента");
		ДоговорДата = ПолучитьЗначениеРеквизитаНаСервере(Договор, "Дата");
		Если OLE_СпрДоговоры.НайтиПоРеквизиту("ДатаВозникновенияОбязательства", ДоговорДата, 0) = 1 Тогда
			Договор77 = OLE_СпрДоговоры.ТекущийЭлемент();
		Иначе
			Договор77 = Неопределено;  
		КонецЕсли; 
		//Если OLE_СпрДоговоры.НайтиПоНаименованию("Основной договор", 0, 0) <> 0 Тогда
		//	Договор77 = OLE_СпрДоговоры.ТекущийЭлемент();
		//Иначе
		//	Договор77 = Неопределено;  
		//КонецЕсли; 
		СтруктураДанных.Вставить("Договор77", Договор77);

		// Вариант расчета НДС
		OLE_СпрВариантыНДС     = СтруктураДанных.OLE_СпрВариантыНДС;
		ВариантРасчетаНалога77 = Неопределено;

		СтруктураВариантовРасчетаНалога = ПолучитьСтруктуруВариантовРасчетаНалога(СтруктураДанных.ДокументРеализации);
		Если СтруктураВариантовРасчетаНалога.СтавкиНДС = "НДС10" Тогда
			// в 1с7 нет ставки НДС 10% ...
		ИначеЕсли СтруктураВариантовРасчетаНалога.СтавкиНДС = "НДС20" Тогда		
			Если СтруктураВариантовРасчетаНалога.НДСВСумме Тогда
				Если OLE_СпрВариантыНДС.НайтиПоНаименованию("НДС в сумме 20%", 0, 0) <> 0 Тогда
					ВариантРасчетаНалога77 = OLE_СпрВариантыНДС.ТекущийЭлемент();
				КонецЕсли;	
			Иначе
				Если OLE_СпрВариантыНДС.НайтиПоНаименованию("НДС сверху 20%", 0, 0) <> 0 Тогда
					ВариантРасчетаНалога77 = OLE_СпрВариантыНДС.ТекущийЭлемент();
				КонецЕсли;	
			КонецЕсли;
		Иначе 
			 //БезНДС
			Если OLE_СпрВариантыНДС.НайтиПоНаименованию("Без налогов", 0, 0) <> 0 Тогда
				ВариантРасчетаНалога77 = OLE_СпрВариантыНДС.ТекущийЭлемент();
			КонецЕсли; 
		КонецЕсли;

		СтруктураДанных.Вставить("ВариантРасчетаНалога77", ВариантРасчетаНалога77);
		//СтруктураДанных.Вставить("НДСВключенВСтоимость", СтруктураВариантовРасчетаНалога.НДСВключенВСтоимость);
		
	//	СтруктураПоказателей = Новый Структура;
	//	ДополнитьСтруктуруПоказателейНаСервере(СтруктураПоказателей, СтруктураВариантовРасчетаНалога.НДСВСумме);
	//	
	//	СтруктураДанных.Вставить("КоличествоПоДокументу", СтруктураПоказателей.КоличествоПоДокументу);
	//	СтруктураДанных.Вставить("СуммаПоДокументу",СтруктураПоказателей.СуммаПоДокументу);
	//	СтруктураДанных.Вставить("СуммаНДС", СтруктураПоказателей.СуммаНДС);
	//	СтруктураДанных.Вставить("СуммаВсего", СтруктураПоказателей.СуммаВсего);
	    МассивСтрок = Новый Массив;   
		МассивУслуги = ПолучитьСтрокиДокументаНаСервере(СтруктураДанных.ДокументРеализации);
		Для каждого СтрУслуги Из МассивУслуги Цикл
			СтруктураСтроки = Новый Структура;
			
			Если СтрНайти(СтрУслуги.Содержание,"Аренда")>0 Тогда  
				Если СтруктураДанных.OLE_Номенклатура.НайтиПоКоду("n05779", 0) <> 0 Тогда 
					Услуга77 = СтруктураДанных.OLE_Номенклатура.ТекущийЭлемент();
				Иначе
					Сообщить("Товар Аренда  помещения в 1с7 не найден!");  
					Отказ = Истина;
					Возврат;
				КонецЕсли; 
			иначеЕсли СтрНайти(СтрУслуги.Содержание,"Компенсация")>0 или СтрНайти(СтрУслуги.Содержание,"Коммунальные")>0 Тогда
				Если СтруктураДанных.OLE_Номенклатура.НайтиПоКоду("n06033", 0) <> 0 Тогда 
					Услуга77 = СтруктураДанных.OLE_Номенклатура.ТекущийЭлемент();
				Иначе
					Сообщить("Товар Компенсация коммунальных услуг в 1с7 не найден!");  
					Отказ = Истина;
					Возврат;
				КонецЕсли; 
			КонецЕсли;

			
			СтруктураСтроки.Вставить("Услуга",	Услуга77);					
			СтруктураСтроки.Вставить("НаименованиеУслуги",	СтрУслуги.Содержание);					
			СтруктураСтроки.Вставить("Количество",	СтрУслуги.Количество);					
			СтруктураСтроки.Вставить("Цена",		СтрУслуги.Цена);
			СтруктураСтроки.Вставить("НДС",			СтрУслуги.СуммаНДС);					
			СтруктураСтроки.Вставить("Сумма",		СтрУслуги.Сумма);					
			СтруктураСтроки.Вставить("Всего",		СтрУслуги.Сумма);					
		    МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;                               
		СтруктураДанных.Вставить("МассивСтрок", МассивСтрок); 
		
	Исключение
		Сообщить("Не удалось выгрузить документ в 1С77! Обратитесь к Администратору 1С");
		БазаOLE = Неопределено;   
		Отказ = Истина;
		Возврат;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПодготовитьСписокДокументовДляВыгрузкиНаСервере()
	МассивСсылок = Новый Массив;
	Для каждого СтрТаб Из СписокРеализаций Цикл
	    Если СтрТаб.Пометка Тогда
			МассивСсылок.Добавить(СтрТаб.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
КонецФункции // ()
 
&НаСервере
Функция ПолучитьСтрокиДокументаНаСервере(ДокументРеализации)
 	МассивСтрок = Новый Массив;
	Для каждого Стр Из ДокументРеализации.Услуги Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Номенклатура",Стр.Номенклатура);					
		СтруктураСтроки.Вставить("Содержание",	Стр.Содержание);					
		СтруктураСтроки.Вставить("Количество",	Стр.Количество);					
		СтруктураСтроки.Вставить("Цена",		Стр.Цена);
		СтруктураСтроки.Вставить("СуммаНДС",	Стр.СуммаНДС);					
		СтруктураСтроки.Вставить("Сумма",		Стр.Сумма);					
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;         
	
	
	Возврат МассивСтрок;
КонецФункции // ()
#КонецОбласти   

#Область РасшифровкаПП 

&НаКлиенте
Процедура ВыгрузитьРасшифровкаПП(Команда) 

	ОчиститьСообщения();
	
	БазаOLE = ПодключитьБазу77();
	
	Если БазаOLE = Неопределено Тогда
		Сообщить("Не удалось подключиться к базе 1с7");  
		Возврат;
	Иначе
		Состояние("База 1с7 подключена");
	КонецЕсли;

	ТабДокументов = ПодготовитьСписокРасшифровкаППДляВыгрузкиНаСервере();

	Для каждого СтрДокумент Из ТабДокументов Цикл
		
		Если ПроверитьПризнакДокументВыгружен(СтрДокумент) Тогда
			Сообщить("Документ "+СтрДокумент+ " уже выгружен в базу 1С77!");  
			Продолжить;			
		КонецЕсли;

		Отказ = Ложь; 
		СтруктураДанных = Новый Структура; 
		СтруктураДанных.Вставить("БазаOLE", 			БазаOLE);
		СтруктураДанных.Вставить("ДокументДляВыгрузки", 	СтрДокумент);
		
		ПодготовитьДанныеДляВыгрузкиРасшифровкаПП(СтруктураДанных, Отказ);
		Если Не Отказ Тогда
			
			ВыгрузитьРасшифровкаПППродолжение(СтруктураДанных); 
		
			ИзменитьПризнакДокументВыгружен(СтрДокумент, СтруктураДанных.НовыйДокументНомер, СтруктураДанных.НовыйДокументДата);
		
			Сообщить("Документ выгружен успешно! В 1С 7 создан документ №" + СтруктураДанных.НовыйДокументНомер + " от " + СтруктураДанных.НовыйДокументДата);
	    КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры   

&НаКлиенте
Процедура ВыгрузитьРасшифровкаПППродолжение(СтруктураДанных)
	
	OLE_Операция = СтруктураДанных.OLE_Операция;
	OLE_Фирма    = СтруктураДанных.ФирмаОтбора77;
	
	Контрагент = СтруктураДанных.Контрагент77; 
	Договор    = СтруктураДанных.Договор77; 
	
	мДокументДляВыгрузки = СтруктураДанных.ДокументДляВыгрузки;
	
	//мНомер = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументРеализации, "Номер"));
	//Если СтрДлина(мНомер)>10 Тогда
	//	мНомер = СтрЗаменить(мНомер,"-0","-");
	//КонецЕсли;
	//Если СтруктураДанных.OLE_ОказаниеУслуг.НайтиПоНомеру(мНомер, ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументРеализации, "Дата")) = 1 Тогда
	//	
	//	Сообщить("В базе 1С77 уже есть документ с номером "+мНомер);  
	//	Возврат;
	//	
	//КонецЕсли;
	
	OLE_Операция.Новая();    
	OLE_Операция.ДатаОперации = ПолучитьЗначениеРеквизитаНаСервере(мДокументДляВыгрузки, "Дата");
	OLE_Операция.Документ.Фирма= OLE_Фирма;  
	OLE_Операция.Документ.Комментарий = "#Загружено из 1С8 по документу Расшифровка ПП №" + ПолучитьЗначениеРеквизитаНаСервере(мДокументДляВыгрузки, "Номер") + " от " + Формат(ПолучитьЗначениеРеквизитаНаСервере(мДокументДляВыгрузки, "Дата"), "ДФ=dd.MM.yyyy");       
	OLE_Операция.Документ.Номер         = Число(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(OLE_Операция.Документ.НомерДок, Истина, Истина));   
	OLE_Операция.Документ.Журнал = "00";
	OLE_Операция.Документ.ЖурналФирма = OLE_Операция.Документ.Журнал + Формат(OLE_Фирма.Код,"Ч(0)2")+"00";
	OLE_Операция.Документ.ЖурналКлиент = "";
	
	OLE_Операция.Содержание = "#Загружено из 1С8";        
	
	Для каждого СтрМассива Из СтруктураДанных.МассивСтрок Цикл
		//теперь сама операция
		OLE_Операция.НоваяПроводка(); 
		OLE_Операция.СодержаниеПроводки = СтрМассива.Содержание;
		OLE_Операция.Дебет.Счет 		= СтрМассива.СчетЗатрат;
		OLE_Операция.Дебет.Субконто(1,СтрМассива.СтатьяЗатрат);
		OLE_Операция.Дебет.Субконто(2,СтрМассива.Подразделение);
		//Опер.Дебет.Субконто(3,Отладка.ДтСубконто3);
		//Опер.Кредит.Счет=Отладка.Кт;        
		//Опер.Кредит.Субконто(1,Отладка.КтСубконто1);
		//Опер.Кредит.Субконто(2,Отладка.КтСубконто2);        
		//Опер.Кредит.Субконто(3,Отладка.КтСубконто3);
		OLE_Операция.Сумма 				= СтрМассива.Сумма;            
		
		OLE_Операция.СуммаОперации = OLE_Операция.СуммаОперации + OLE_Операция.Сумма;  
		
	КонецЦикла;
	
	
	Попытка
	
		OLE_Операция.Записать(); 
		//OLE_Операция.Провести();
	Исключение
	   Сообщить("Ошибка проведения в 1с7 Операции №" + OLE_Операция.Документ.Номер + " от " + Формат(OLE_Операция.Документ.ДатаДок, "ДФ=dd.MM.yyyy") + ". Попробуйте провести в 1с7 этот документ вручную!");
	КонецПопытки;

	СтруктураДанных.Вставить("НовыйДокументНомер", OLE_Операция.Документ.НомерДок);
	СтруктураДанных.Вставить("НовыйДокументДата", OLE_Операция.Документ.ДатаДок);	
	
КонецПроцедуры                      
	
&НаКлиенте
Процедура ПодготовитьДанныеДляВыгрузкиРасшифровкаПП(СтруктураДанных, Отказ) Экспорт 
	
	Попытка
		//СтруктураДанных.Вставить("БазаOLE",              БазаOLE); 
		СтруктураДанных.Вставить("OLE_Контрагенты",      СтруктураДанных.БазаOLE.CreateObject("Справочник.Контрагенты"));
		СтруктураДанных.Вставить("OLE_СпрДоговоры",      СтруктураДанных.БазаOLE.CreateObject("Справочник.Договоры"));  
		СтруктураДанных.Вставить("OLE_СпрВариантыНДС",   СтруктураДанных.БазаOLE.CreateObject("Справочник.ВариантыРасчетаНалогов")); 
		СтруктураДанных.Вставить("OLE_Номенклатура",  	 СтруктураДанных.БазаOLE.CreateObject("Справочник.Номенклатура")); 
		СтруктураДанных.Вставить("OLE_Подразделения",  	 СтруктураДанных.БазаOLE.CreateObject("Справочник.Подразделения")); 
		СтруктураДанных.Вставить("OLE_СтатьиИздержекОбращения",  	 СтруктураДанных.БазаOLE.CreateObject("Справочник.СтатьиИздержекОбращения")); 
		СтруктураДанных.Вставить("OLE_ДокОперация",      СтруктураДанных.БазаOLE.CreateObject("Документ.Операция"));  
		СтруктураДанных.Вставить("OLE_Документ",      	 СтруктураДанных.БазаOLE.CreateObject("Документ"));  
		СтруктураДанных.Вставить("OLE_Операция",         СтруктураДанных.БазаOLE.CreateObject("Операция"));  
		СтруктураДанных.Вставить("OLE_СпрФирмы", 		 СтруктураДанных.БазаOLE.CreateObject("Справочник.Фирмы"));
		СтруктураДанных.Вставить("OLE_Счет",             СтруктураДанных.БазаOLE.CreateObject("Счет"));  

	//НСтрока.Субконто8_1 = "СтатьиЗатрат";
	//НСтрока.Субконто77_1 = "СтатьиИздержекОбращения"; 
	//НСтрока.Ключ = "Наименование"; 
	
		//мНомер = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументДляВыгрузки, "Номер"));	
		//Если СтрДлина(мНомер)>10 Тогда
		//	мНомер = СтрЗаменить(мНомер,"-0","-");
		//КонецЕсли;
		
		//Если СтруктураДанных.OLE_Операция.НайтиПоНомеру(мНомер, ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументДляВыгрузки, "Дата")) = 1 Тогда
		//	Отказ = Истина;
		//	Сообщить("В базе 1С77 уже есть документ с номером "+мНомер);  
		//	Возврат;
		//	
		//КонецЕсли;
		
		
		// Фирма
		мОрганизация = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументДляВыгрузки, "Организация");
		ОрганизацияИНН = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(мОрганизация, "ИНН"));
		Если СтруктураДанных.OLE_СпрФирмы.НайтиПоРеквизиту("ИНН", ОрганизацияИНН) <> 0 Тогда
			ФирмаОтбора77 = СтруктураДанных.OLE_СпрФирмы.ТекущийЭлемент();
		Иначе
			Сообщить("Организация " + мОрганизация + " в 1с7 не найдена!");  
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		СтруктураДанных.Вставить("ФирмаОтбора77", ФирмаОтбора77);
		
		// Контрагент
		Контрагент = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументДляВыгрузки, "Контрагент");
		КонтрагентИНН = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(Контрагент, "ИНН"));
		Если СтруктураДанных.OLE_Контрагенты.НайтиПоРеквизиту("ИНН", КонтрагентИНН, 1) <> 0 Тогда
			Контрагент77 = СтруктураДанных.OLE_Контрагенты.ТекущийЭлемент();
		Иначе
			Сообщить("Контрагент " + Контрагент + " с ИНН " + КонтрагентИНН + " в 1с7 не найден!");  
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		СтруктураДанных.Вставить("Контрагент77", Контрагент77);
		
		// Договор
		OLE_СпрДоговоры = СтруктураДанных.OLE_СпрДоговоры;
		OLE_СпрДоговоры.ИспользоватьВладельца(Контрагент77);  
		
		Договор = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументДляВыгрузки, "ДоговорКонтрагента");
		ДоговорДата = ПолучитьЗначениеРеквизитаНаСервере(Договор, "Дата");
		Если OLE_СпрДоговоры.НайтиПоРеквизиту("ДатаВозникновенияОбязательства", ДоговорДата, 0) = 1 Тогда
			Договор77 = OLE_СпрДоговоры.ТекущийЭлемент();
		Иначе
			Договор77 = Неопределено;  
		КонецЕсли; 
		СтруктураДанных.Вставить("Договор77", Договор77);
		
		БазаOLE = СтруктураДанных.БазаOLE;
		
		МассивСтрок = Новый Массив;   
		МассивСтрокТЧ = ПолучитьСтрокиРасшифровкаППНаСервере(СтруктураДанных.ДокументДляВыгрузки);
		Для каждого СтрТЧ Из МассивСтрокТЧ Цикл
			
			СтруктураСтроки = Новый Структура;           
			
			//OLE_Счет = СтруктураДанных.OLE_Счет;       
			//ПарОтб = Новый Структура;
			//ПарОтб.Вставить("Счет8",СтрТЧ.СчетЗатрат);
			//СтрСчет = Объект.СписокСчетовДляПереноса.НайтиСтроки(ПарОтб);
			//Если СтрСчет.Количество()>0 Тогда 
			//	Если OLE_Счет.НайтиПоКоду(СтрСчет[0].Счет77)=0 Тогда
			//		Сообщить("В базе 77 не найден счет: " + СтрСчет[0].Счет77 );  
			//	КонецЕсли;
			//иначе
			//	Сообщить("Не найден счет: " + СтрТЧ.СчетЗатрат + " в 1с7 не найден!");  
			//КонецЕсли;
			
			СчетИз77 = БазаOLE.СчетПоКоду("044.1.1", БазаOLE.ОсновнойПланСчетов());
			Если БазаOLE.ПустоеЗначение(СчетИз77) = 1 ТОгда
				Сообщить("Нет счета 044.1.1 в 77!!!");  
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
			Если СчетИз77.ЭтоГруппа() = 1 ТОгда
				Сообщить("Счет это группа!!!");  
				Отказ = Истина;
				Возврат;
			КонецЕсли;  
			СтруктураСтроки.Вставить("СчетЗатрат", СчетИз77);					
		
			
			
			
			OLE_СтатьиИздержекОбращения = СтруктураДанных.OLE_СтатьиИздержекОбращения;
			мСтрокаП = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(СтрТЧ.СтатьяЗатрат, "Наименование"));
			Если OLE_СтатьиИздержекОбращения.НайтиПоНаименованию(мСтрокаП, 0, 0) <> 0 Тогда
				СтруктураСтроки.Вставить("СтатьяЗатрат", OLE_СтатьиИздержекОбращения.ТекущийЭлемент());					
			иначе
				Сообщить("Не найдена статья: " + мСтрокаП + " в 1с7 не найдена!");  
				СтруктураСтроки.Вставить("СтатьяЗатрат", OLE_СтатьиИздержекОбращения.ТекущийЭлемент());					
				//Отказ = Истина;
				//Возврат;
			КонецЕсли; 
			
			OLE_Подразделения = СтруктураДанных.OLE_Подразделения;
			мСтрокаП = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(СтрТЧ.Подразделение, "Наименование"));
			Если OLE_Подразделения.НайтиПоНаименованию(мСтрокаП, 0, 0) <> 0 Тогда
				СтруктураСтроки.Вставить("Подразделение", OLE_Подразделения.ТекущийЭлемент());					
			иначе
				Сообщить("Не найдено Подразделение: " + мСтрокаП + " в 1с7 не найдена!");  
				СтруктураСтроки.Вставить("Подразделение", OLE_Подразделения.ТекущийЭлемент());					
				//Отказ = Истина;
				//Возврат;
			КонецЕсли; 

			СтруктураСтроки.Вставить("Содержание",		СтрТЧ.Содержание);
			СтруктураСтроки.Вставить("СуммаНДС",		СтрТЧ.СуммаНДС);					
			СтруктураСтроки.Вставить("Сумма",			СтрТЧ.Сумма);					
		    МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;                               
		СтруктураДанных.Вставить("МассивСтрок", МассивСтрок); 
		
	Исключение
		Сообщить("Не удалось выгрузить документ в 1С77! Обратитесь к Администратору 1С");
		БазаOLE = Неопределено;   
		Отказ = Истина;
		Возврат;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПодготовитьСписокРасшифровкаППДляВыгрузкиНаСервере()
	МассивСсылок = Новый Массив;
	Для каждого СтрТаб Из СписокРасшифровкаПП Цикл
	    Если СтрТаб.Пометка Тогда
			МассивСсылок.Добавить(СтрТаб.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
КонецФункции // ()
 
&НаСервере
Функция ПолучитьСтрокиРасшифровкаППНаСервере(ДокументДляВыгрузки)
	МассивСтрок = Новый Массив;
	Для каждого Стр Из ДокументДляВыгрузки.ТаблицаРасшифровки Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("СчетЗатрат",		Стр.СчетЗатрат);					
		СтруктураСтроки.Вставить("СтатьяЗатрат",	Стр.СтатьяЗатрат);					
		СтруктураСтроки.Вставить("Подразделение",	Стр.Подразделение);					
		СтруктураСтроки.Вставить("Содержание",		Стр.Содержание);
		СтруктураСтроки.Вставить("СуммаНДС",		Стр.СуммаНДС);					
		СтруктураСтроки.Вставить("Сумма",			Стр.Сумма);					
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;         
	Возврат МассивСтрок;
КонецФункции // ()

#КонецОбласти   

#Область БанковскиеВыписки

&НаКлиенте
Процедура ВыгрузитьБанковскиеВыписки(Команда)
	
	ОчиститьСообщения();
	
	БазаOLE = ПодключитьБазу77();
	
	Если БазаOLE = Неопределено Тогда
		Сообщить("Не удалось подключиться к базе 1с7");  
		Возврат;
	Иначе
		Состояние("База 1с7 подключена");
	КонецЕсли;

	
	МассивОрг = ПодготовитьСписокБанковскиеВыпискиДляВыгрузкиНаСервере();
	Для каждого СтрОрг Из МассивОрг Цикл
		МассивДанных = Новый Массив;
		Для каждого СтрДокумент Из СтрОрг.МассивДок Цикл
			
			Если ПроверитьПризнакДокументВыгружен(СтрДокумент.Ссылка) Тогда
				Сообщить("СТРОКА "+СтрДокумент.СтрокаНомер+" Документ "+СтрДокумент.Ссылка+ " уже выгружен в базу 1С77!");  
				Продолжить;			
			КонецЕсли;
			
			Отказ = Ложь; 
			СтруктураДанных = Новый Структура; 
			СтруктураДанных.Вставить("БазаOLE", 			БазаOLE);
			СтруктураДанных.Вставить("ДокументДляВыгрузки", СтрДокумент.Ссылка);
			СтруктураДанных.Вставить("СтрокаНомер", СтрДокумент.СтрокаНомер);
			
			ПодготовитьДанныеДляВыгрузкиБанковскиеВыписки(СтруктураДанных, Отказ);
			МассивДанных.Добавить(СтруктураДанных);
		КонецЦикла;  
		
		Если Не Отказ Тогда
			ВыгрузитьБанковскиеВыпискиПродолжение(МассивДанных); 
			//Для каждого СтрДокумент Из МассивДок Цикл
			//	ВыгрузитьБанковскиеВыпискиПродолжение(СтрДокумент); 
			//	Если НЕ СтруктураДанных.Отказ Тогда
			//		ИзменитьПризнакДокументВыгружен(ДокументДляВыгрузки, СтруктураДанных.НовыйДокументНомер, СтруктураДанных.НовыйДокументДата);
			//		Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Документ выгружен успешно! В 1С 7 создан документ №" + СтруктураДанных.НовыйДокументНомер + " от " + СтруктураДанных.НовыйДокументДата);
			//	КонецЕсли;
			//КонецЦикла;  
		КонецЕсли;
		
	КонецЦикла;  
	
	ЗаполнитьСписокДокументов(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);

КонецПроцедуры  

&НаСервере
Функция ПодготовитьСписокБанковскиеВыпискиДляВыгрузкиНаСервере()
	ТабВыписки = СписокБанковскиеВыписки.Выгрузить();
	ТабВыписки.Очистить();
	
	Для каждого СтрТаб Из СписокБанковскиеВыписки Цикл
		Если СтрТаб.Пометка Тогда
			НСтрока = ТабВыписки.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрока,СтрТаб);
			//Если НЕ ОднаОперацияПоОрганизации Тогда
			//	НСтрока.Организация = "";				
			//КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	МассивДанных = Новый Массив;
	ТабОрг = ТабВыписки.Скопировать();
	ТабОрг.Свернуть("Организация");
	Для каждого СтрОрг Из ТабОрг Цикл
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Организация",СтрОрг.Организация);
		
		МассивДок = Новый Массив; 

		МассивСтрок = ТабВыписки.НайтиСтроки(Новый Структура("Организация", СтрОрг.Организация));
		Для каждого СтрДокумент Из МассивСтрок Цикл
        	СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("Организация", СтрДокумент.Организация);
			СтруктураСтроки.Вставить("Ссылка", СтрДокумент.Ссылка);
			СтруктураСтроки.Вставить("СтрокаНомер", СтрДокумент.СтрокаНомер);
			МассивДок.Добавить(СтруктураСтроки);
		КонецЦикла;
		СтруктураДанных.Вставить("МассивДок",МассивДок);
		
		МассивДанных.Добавить(СтруктураДанных);
	КонецЦикла; 
	
	Возврат МассивДанных;
КонецФункции // ()

&НаКлиенте
Процедура ПодготовитьДанныеДляВыгрузкиБанковскиеВыписки(СтруктураДанных, Отказ) Экспорт  

	Попытка
		СтруктураДанных.Вставить("OLE_Контрагенты",      СтруктураДанных.БазаOLE.CreateObject("Справочник.Контрагенты"));
		СтруктураДанных.Вставить("OLE_СпрДоговоры",      СтруктураДанных.БазаOLE.CreateObject("Справочник.Договоры"));  
		СтруктураДанных.Вставить("OLE_СпрВариантыНДС",   СтруктураДанных.БазаOLE.CreateObject("Справочник.ВариантыРасчетаНалогов")); 
		СтруктураДанных.Вставить("OLE_Номенклатура",  	 СтруктураДанных.БазаOLE.CreateObject("Справочник.Номенклатура")); 
		СтруктураДанных.Вставить("OLE_Подразделения",  	 СтруктураДанных.БазаOLE.CreateObject("Справочник.Подразделения")); 
		СтруктураДанных.Вставить("OLE_СтатьиИздержекОбращения",  	 СтруктураДанных.БазаOLE.CreateObject("Справочник.СтатьиИздержекОбращения")); 
		СтруктураДанных.Вставить("OLE_ДокОперация",      СтруктураДанных.БазаOLE.CreateObject("Документ.Операция"));  
		СтруктураДанных.Вставить("OLE_Документ",      	 СтруктураДанных.БазаOLE.CreateObject("Документ"));  
		СтруктураДанных.Вставить("OLE_Операция",         СтруктураДанных.БазаOLE.CreateObject("Операция"));  
		СтруктураДанных.Вставить("OLE_СпрФирмы", 		 СтруктураДанных.БазаOLE.CreateObject("Справочник.Фирмы"));
		СтруктураДанных.Вставить("OLE_Счет",             СтруктураДанных.БазаOLE.CreateObject("Счет"));  
		
		// Фирма
		мОрганизация = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументДляВыгрузки, "Организация");
		ОрганизацияИНН = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(мОрганизация, "ИНН"));
		Если СтруктураДанных.OLE_СпрФирмы.НайтиПоРеквизиту("ИНН", ОрганизацияИНН) <> 0 Тогда
			ФирмаОтбора77 = СтруктураДанных.OLE_СпрФирмы.ТекущийЭлемент();
		Иначе
			Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+"Организация " + мОрганизация + " в 1с7 не найдена!");  
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		СтруктураДанных.Вставить("ФирмаОтбора77", ФирмаОтбора77);
		
		БазаOLE = СтруктураДанных.БазаOLE;  
		
		СчетИз77 = БазаOLE.СчетПоКоду("51", БазаOLE.ОсновнойПланСчетов());
		Если БазаOLE.ПустоеЗначение(СчетИз77) = 1 ТОгда
			Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Нет счета в 77!!!");  
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		Если СчетИз77.ЭтоГруппа() = 1 ТОгда
			Сообщить("Счет это группа!!!");  
			Отказ = Истина;
			Возврат;
		КонецЕсли;  
		СтруктураДанных.Вставить("СчетБанк", СчетИз77);
		
		СчетОрганизации = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументДляВыгрузки, "СчетОрганизации");
		OLEБанковскийСчет = БазаOLE.CreateObject("Справочник.БанковскиеСчета");
		OLEБанковскийСчет.ИспользоватьВладельца(ФирмаОтбора77);
		Если OLEБанковскийСчет.НайтиПоРеквизиту("Номер", ПолучитьЗначениеРеквизитаНаСервере(СчетОрганизации, "НомерСчета"), 1) <> 0 Тогда
			СтруктураДанных.Вставить("БанковскийСчет", OLEБанковскийСчет.ТекущийЭлемент());
		Иначе
			Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Счет  " + СчетОрганизации + " в 1с7 не найден!");  
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
//Опрделим проводки документа		
		СтрПроводок = ОпределитьТипВыписки(СтруктураДанных.ДокументДляВыгрузки);
		ОпределитьНастройкиСчетов(СтруктураДанных.ДокументДляВыгрузки,СтрПроводок);   
		
		OLEДДС= БазаOLE.CreateObject("Справочник.ДвиженияДенежныхСредств");
		Если OLEДДС.НайтиПоНаименованию(СтрПроводок.СтатьяДДС77, 0, 0) <> 0 Тогда
			СтруктураДанных.Вставить("ДДС", OLEДДС.ТекущийЭлемент());					
		иначе
			Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Не найдена статья ДДС: " + СтрПроводок.СтатьяДДС77 + " в 1с7 не найдена!");  
			СтруктураДанных.Вставить("ДДС", OLEДДС.ТекущийЭлемент());					
			//Отказ = Истина;
			//Возврат;
		КонецЕсли; 
		
		//	
		СтруктураДанных.Вставить("ТипВыписки", СтрПроводок.ТипВыписки);
		//
		МассивПроводокЗаб = Новый Массив;
		Если СтрПроводок.Свойство("РасшифровкаПП") Тогда
		//Есть расшифровка ПП	 
			Для каждого СтрМасРасшПП Из СтрПроводок.РасшифровкаПП Цикл
				
				СтрПроводокЗаб = Новый Структура;
				СчетИз77 = БазаOLE.СчетПоКоду(СтрМасРасшПП.СчетЗатрат, БазаOLE.ОсновнойПланСчетов());
				Если БазаOLE.ПустоеЗначение(СчетИз77) = 1 ТОгда
					Сообщить("Нет счета " + СтрМасРасшПП.СчетЗатрат+" в 77!!!");  
					Отказ = Истина;
					Возврат;
				КонецЕсли;	
				Если СчетИз77.ЭтоГруппа() = 1 ТОгда
					Сообщить("Счет это группа!!!");  
				КонецЕсли;  
				
				СтрПроводокЗаб.Вставить("СчетЗатратЗаб", СчетИз77);					
				
				OLE_СтатьиИздержекОбращения = СтруктураДанных.OLE_СтатьиИздержекОбращения;
				Если OLE_СтатьиИздержекОбращения.НайтиПоНаименованию(СтрМасРасшПП.СтатьяЗатрат, 0, 0) <> 0 Тогда
					СтрПроводокЗаб.Вставить("СубконтоЗаб1", OLE_СтатьиИздержекОбращения.ТекущийЭлемент());					
				иначе
					Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Не найдена статья издержек: " + СтрМасРасшПП.СтатьяЗатрат + " в 1с7 не найдена!");  
					СтрПроводокЗаб.Вставить("СубконтоЗаб1", OLE_СтатьиИздержекОбращения.ТекущийЭлемент());					
				КонецЕсли; 

				OLE_Подразделения = БазаOLE.CreateObject("Справочник.Подразделения");
				OLE_МестаХранения = БазаOLE.CreateObject("Справочник.МестаХранения");
				мСтрокаП = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(СтрМасРасшПП.Подразделение, "Наименование"));
				мСтрокаМ = СокрЛП(ПолучитьЗначениеСвойстваНаСервере(СтрМасРасшПП.Подразделение,"КодовоеОбозначение"));
				Если OLE_МестаХранения.НайтиПоРеквизиту("Каталог",мСтрокаМ,1) <> 0 Тогда 
					СтрПроводокЗаб.Вставить("СубконтоЗаб2", OLE_МестаХранения.Подразделение);					
				иначеЕсли OLE_Подразделения.НайтиПоНаименованию(мСтрокаП, 0, 0) <> 0 Тогда
					СтрПроводокЗаб.Вставить("СубконтоЗаб2", OLE_Подразделения.ТекущийЭлемент());					
				иначе
					Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Не найдено Подразделение: " + мСтрокаП + " в 1с7 не найдена!");  
					СтрПроводокЗаб.Вставить("СубконтоЗаб2", OLE_Подразделения.ТекущийЭлемент());					
				КонецЕсли; 
				
				СтрПроводокЗаб.Вставить("Сумма", СтрМасРасшПП.Сумма);
				СтрПроводокЗаб.Вставить("Содержание", СтрМасРасшПП.Содержание);

				МассивПроводокЗаб.Добавить(СтрПроводокЗаб);
			КонецЦикла;
			СтруктураДанных.Вставить("МассивПроводокЗаб", МассивПроводокЗаб);					
		ИначеЕсли СтрПроводок.Свойство("СчетЗатрат77") Тогда
		// Счет затрат 44 указан в настройках	       
		
			СтрПроводокЗаб = Новый Структура;
			СчетИз77 = БазаOLE.СчетПоКоду(СтрПроводок.СчетЗатрат77, БазаOLE.ОсновнойПланСчетов());
			Если БазаOLE.ПустоеЗначение(СчетИз77) = 1 ТОгда
				Сообщить("Нет счета " + СтрПроводок.СчетЗатрат77+" в 77!!!");  
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
			Если СчетИз77.ЭтоГруппа() = 1 ТОгда
				Сообщить("Счет это группа!!!");  
				Отказ = Истина;
				Возврат;
			КонецЕсли;  
			
			СтрПроводокЗаб.Вставить("СчетЗатратЗаб", СчетИз77);					
			
			OLE_СтатьиИздержекОбращения = СтруктураДанных.OLE_СтатьиИздержекОбращения;
			Если OLE_СтатьиИздержекОбращения.НайтиПоНаименованию(СтрПроводок.СтатьяЗатрат77, 0, 0) <> 0 Тогда
				СтрПроводокЗаб.Вставить("СубконтоЗаб1", OLE_СтатьиИздержекОбращения.ТекущийЭлемент());					
			иначе
				Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Не найдена статья издержек: " + СтрПроводок.СтатьяЗатрат77 + " в 1с7 не найдена!");  
				СтрПроводокЗаб.Вставить("СубконтоЗаб1", OLE_СтатьиИздержекОбращения.ТекущийЭлемент());					
			КонецЕсли; 
			
			OLE_Подразделения = СтруктураДанных.OLE_Подразделения;
			OLE_МестаХранения = БазаOLE.CreateObject("Справочник.МестаХранения");
			мРек = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументДляВыгрузки, "ПодразделениеОрганизации"); 
			мСтрокаП = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(мРек,"Наименование"));
			мСтрокаМ = СокрЛП(ПолучитьЗначениеСвойстваНаСервере(мРек,"КодовоеОбозначение"));
			Если OLE_МестаХранения.НайтиПоРеквизиту("Каталог",мСтрокаМ,1) <> 0 Тогда 
				СтрПроводокЗаб.Вставить("СубконтоЗаб2", OLE_МестаХранения.Подразделение);					
			иначеЕсли OLE_Подразделения.НайтиПоКоду(мСтрокаМ) <> 0 Тогда
				СтрПроводокЗаб.Вставить("СубконтоЗаб2", OLE_Подразделения.ТекущийЭлемент());					
			иначе
				Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Не найдено Подразделение: " + мСтрокаП + " в 1с7 не найдена!");  
				СтрПроводокЗаб.Вставить("СубконтоЗаб2", OLE_Подразделения.ТекущийЭлемент());					
			КонецЕсли; 
			
			СтрПроводокЗаб.Вставить("Сумма", СтрПроводок.Сумма);
			СтрПроводокЗаб.Вставить("Содержание", СтрПроводок.Содержание);

			МассивПроводокЗаб.Добавить(СтрПроводокЗаб);
			СтруктураДанных.Вставить("МассивПроводокЗаб", МассивПроводокЗаб);					
		КонецЕсли;
		
		СчетИз77 = БазаOLE.СчетПоКоду(СтрПроводок.Счет77, БазаOLE.ОсновнойПланСчетов());
		Если БазаOLE.ПустоеЗначение(СчетИз77) = 1 ТОгда
			Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Нет счета"+СтрПроводок.Счет77 +" в 77!!!");  
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		Если СчетИз77.ЭтоГруппа() = 1 ТОгда
			Сообщить("Счет это группа!!!");  
			Отказ = Истина;
			Возврат;
		КонецЕсли;  
		СтруктураДанных.Вставить("Счет", СчетИз77);
		СтруктураДанных.Вставить("Сумма", СтрПроводок.Сумма);
		СтруктураДанных.Вставить("Содержание", СтрПроводок.Содержание);
		
		Если СтрПроводок.ВидСубконто1 = "Контрагенты" Тогда
			// Контрагент
			Контрагент = СтрПроводок.Субконто1;
			КонтрагентИНН = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(Контрагент, "ИНН"));
			Если СтруктураДанных.OLE_Контрагенты.НайтиПоРеквизиту("ИНН", КонтрагентИНН, 1) <> 0 Тогда
				Контрагент77 = СтруктураДанных.OLE_Контрагенты.ТекущийЭлемент();
			Иначе
				Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+ " Контрагент " + Контрагент + " с ИНН " + КонтрагентИНН + " в 1с7 не найден!");  
				Отказ = Истина;
				Возврат;
			КонецЕсли; 
			СтруктураДанных.Вставить("Субконто1", Контрагент77);
			
			// Договор
			OLE_СпрДоговоры = СтруктураДанных.OLE_СпрДоговоры;
			OLE_СпрДоговоры.ИспользоватьВладельца(Контрагент77);  
			
			Договор = СтрПроводок.Субконто2;
			ДоговорДата = ПолучитьЗначениеРеквизитаНаСервере(Договор, "Дата");
			ДоговорНаименование = ПолучитьЗначениеРеквизитаНаСервере(Договор, "Наименование");
			Если OLE_СпрДоговоры.НайтиПоРеквизиту("ДатаВозникновенияОбязательства", ДоговорДата, 0) = 1 Тогда
				Договор77 = OLE_СпрДоговоры.ТекущийЭлемент();
			ИначеЕсли OLE_СпрДоговоры.НайтиПоНаименованию(ДоговорНаименование) = 1 Тогда 
				Договор77 = OLE_СпрДоговоры.ТекущийЭлемент();
			иначеЕсли СоздатьДоговор Тогда
				OLE_СпрДоговоры.Новый();
				OLE_СпрДоговоры.Наименование = ДоговорНаименование;
				OLE_СпрДоговоры.ДатаВозникновенияОбязательства = ДоговорДата;
				Попытка
					OLE_СпрДоговоры.Записать();
					Договор77 = OLE_СпрДоговоры.ТекущийЭлемент(); 
					Сообщить("Дла контрагента "+Контрагент+" в 1с77 создан договор "+ДоговорНаименование);
				Исключение
					Договор77 = Неопределено;  
				КонецПопытки;
			иначе
				Договор77 = Неопределено;  
			КонецЕсли; 
			СтруктураДанных.Вставить("Субконто2", Договор77);
			
		ИначеЕсли СтрПроводок.ВидСубконто1 = "Сотрудники" Тогда
			//Сотрудники
			OLE_Сотрудники = БазаOLE.CreateObject("Справочник.Сотрудники");;
			Если OLE_Сотрудники.НайтиПоНаименованию(ПолучитьЗначениеРеквизитаНаСервере(СтрПроводок.Субконто1, "Наименование"), 0, 0) <> 0 Тогда
			иначе
				Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Не найдена сотрудник: " + СтрПроводок.Субконто1 + " в 1с7 не найдена!");  
			КонецЕсли; 
			СтруктураДанных.Вставить("Субконто1", OLE_Сотрудники.ТекущийЭлемент()); 
		ИначеЕсли СтрПроводок.ВидСубконто1 = "МестаХранения" Тогда
			//Сотрудники
			OLE_Сотрудники = БазаOLE.CreateObject("Справочник.МестаХранения");;
			Если OLE_Сотрудники.НайтиПоНаименованию(ПолучитьЗначениеРеквизитаНаСервере(СтрПроводок.Субконто1, "Наименование"), 0, 0) <> 0 Тогда
			иначе
				Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Не найдена МестаХранения: " + СтрПроводок.Субконто1 + " в 1с7 не найдена!");  
			КонецЕсли; 
			СтруктураДанных.Вставить("Субконто1", OLE_Сотрудники.ТекущийЭлемент()); 
		ИначеЕсли СтрПроводок.ВидСубконто1 = "ПрочиеДоходыИРасходы" Тогда
			//Сотрудники
			OLE_Сотрудники = БазаOLE.CreateObject("Справочник.МестаХранения");;
			Если OLE_Сотрудники.НайтиПоНаименованию(ПолучитьЗначениеРеквизитаНаСервере(СтрПроводок.Субконто1, "Наименование"), 0, 0) <> 0 Тогда
			иначе
				Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Не найдена ПрочиеДоходыИРасходы: " + СтрПроводок.Субконто1 + " в 1с7 не найдена!");  
			КонецЕсли; 
			СтруктураДанных.Вставить("Субконто1", OLE_Сотрудники.ТекущийЭлемент()); 
	    ИначеЕсли СтрПроводок.ВидСубконто1 = "ВидыПлатежейВБюджет" Тогда
			ВидПеречисления	=	БазаOLE.Перечисление.ПолучитьАтрибут("ВидыПлатежейВБюджет");
			Значение		=	ВидПеречисления.ЗначениеПоИдентификатору(""+СтрПроводок.Субконто1);
			СтруктураДанных.Вставить("Субконто1", Значение);   
		Иначе	
			Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Не настроена выгрузка по счету " + СтрПроводок.СчетКод);  
			//Отказ = Истина;
			//Возврат;
			
		КонецЕсли;	
		
	Исключение
		Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Не удалось выгрузить документ в 1С77! Обратитесь к Администратору 1С");
		БазаOLE = Неопределено;   
		Отказ = Истина;
		Возврат;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьБанковскиеВыпискиПродолжение(МассивДанных)
	СтруктураДанных = МассивДанных[0];
	
	OLE_Операция = СтруктураДанных.OLE_Операция;
	
	OLE_Операция.Новая();    
	OLE_Операция.ДатаОперации = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.ДокументДляВыгрузки, "Дата");
	OLE_Операция.Документ.ДатаДок = OLE_Операция.ДатаОперации;
	OLE_Операция.Документ.Фирма = СтруктураДанных.ФирмаОтбора77;  
	//OLE_Операция.Документ.Комментарий = "#Загружено из 1С8 по документу Выписка №" + ПолучитьЗначениеРеквизитаНаСервере(мДокументДляВыгрузки, "Номер") + " от " + Формат(ПолучитьЗначениеРеквизитаНаСервере(мДокументДляВыгрузки, "Дата"), "ДФ=dd.MM.yyyy");       
	OLE_Операция.Документ.Комментарий = "#Загружено из 1С8 БанковскаяВыписка";       
	OLE_Операция.Документ.Журнал = "00";
	OLE_Операция.Документ.ЖурналФирма = OLE_Операция.Документ.Журнал + Формат(СтруктураДанных.ФирмаОтбора77.Код,"Ч(0)2")+"00";
	OLE_Операция.Документ.ЖурналКлиент = "";
	OLE_Операция.Документ.УстановитьНовыйНомер("");
	OLE_Операция.Документ.Номер         = Число(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(OLE_Операция.Документ.НомерДок, Истина, Истина));   
	OLE_Операция.Содержание = "#Загружено из 1С8 БанковскаяВыписка";    
	
	Для каждого СтруктураДанныхДок Из МассивДанных Цикл
		
		мДокументДляВыгрузки = СтруктураДанныхДок.ДокументДляВыгрузки;
		
		Если СтруктураДанныхДок.ТипВыписки = "Приход" Тогда
			OLE_Операция.НоваяПроводка(); 
			OLE_Операция.СодержаниеПроводки = СтруктураДанныхДок.Содержание;
			OLE_Операция.Дебет.Счет 		= СтруктураДанныхДок.СчетБанк;
			OLE_Операция.Дебет.Субконто(1,СтруктураДанныхДок.БанковскийСчет);
			OLE_Операция.Дебет.Субконто(2,СтруктураДанныхДок.ДДС);
			
			OLE_Операция.Кредит.Счет=СтруктураДанныхДок.Счет;  
			Если СтруктураДанныхДок.Свойство("Субконто1") Тогда
				OLE_Операция.Кредит.Субконто(1,СтруктураДанныхДок.Субконто1);
			КонецЕсли;
			Если СтруктураДанныхДок.Свойство("Субконто2") Тогда
				OLE_Операция.Кредит.Субконто(2,СтруктураДанныхДок.Субконто2);        
			КонецЕсли;
			
			OLE_Операция.Сумма = СтруктураДанныхДок.Сумма;            
			OLE_Операция.СуммаОперации = OLE_Операция.СуммаОперации + OLE_Операция.Сумма;            
		иначе
			OLE_Операция.НоваяПроводка(); 
			OLE_Операция.СодержаниеПроводки = СтруктураДанныхДок.Содержание;
			OLE_Операция.Кредит.Счет 		= СтруктураДанныхДок.СчетБанк;
			OLE_Операция.Кредит.Субконто(1,СтруктураДанныхДок.БанковскийСчет);
			OLE_Операция.Кредит.Субконто(2,СтруктураДанныхДок.ДДС);
			
			OLE_Операция.Дебет.Счет=СтруктураДанныхДок.Счет;  
			Если СтруктураДанныхДок.Свойство("Субконто1") Тогда
				OLE_Операция.Дебет.Субконто(1,СтруктураДанныхДок.Субконто1);
			КонецЕсли;
			Если СтруктураДанных.Свойство("Субконто2") Тогда
				OLE_Операция.Дебет.Субконто(2,СтруктураДанныхДок.Субконто2);        
			КонецЕсли;
			
			OLE_Операция.Сумма = СтруктураДанныхДок.Сумма;            
			OLE_Операция.СуммаОперации = OLE_Операция.СуммаОперации + OLE_Операция.Сумма;            
			
			
			Если СтруктураДанныхДок.Свойство("МассивПроводокЗаб") Тогда  
				Для каждого СтрМассиваРасшПП Из  СтруктураДанныхДок.МассивПроводокЗаб Цикл
					
					OLE_Операция.НоваяПроводка(); 
					OLE_Операция.СодержаниеПроводки = СтрМассиваРасшПП.Содержание;
					OLE_Операция.Дебет.Счет=СтрМассиваРасшПП.СчетЗатратЗаб;  
					Если СтрМассиваРасшПП.Свойство("СубконтоЗаб1") Тогда
						OLE_Операция.Дебет.Субконто(1,СтрМассиваРасшПП.СубконтоЗаб1);
					КонецЕсли;
					Если СтрМассиваРасшПП.Свойство("СубконтоЗаб2") Тогда
						OLE_Операция.Дебет.Субконто(2,СтрМассиваРасшПП.СубконтоЗаб2);        
					КонецЕсли;
					
					OLE_Операция.Сумма = СтрМассиваРасшПП.Сумма;            
					OLE_Операция.СуммаОперации = OLE_Операция.СуммаОперации + СтрМассиваРасшПП.Сумма;    
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;                        
	
	Попытка
		OLE_Операция.Записать();
		Отказ = Ложь;
	Исключение
		Отказ = Истина;
		//Сообщить("СТРОКА "+СтруктураДанныхДок.СтрокаНомер+" Ошибка проведения в 1с7 Операции №" + OLE_Операция.Документ.Номер + " от " + Формат(OLE_Операция.Документ.ДатаДок, "ДФ=dd.MM.yyyy") + ". Попробуйте провести в 1с7 этот документ вручную!");
		//СтруктураДанныхДок.Вставить("Отказ", Истина);	
	КонецПопытки;
	//СтруктураДанныхДок.Вставить("НовыйДокументНомер", OLE_Операция.Документ.НомерДок);
	//СтруктураДанныхДок.Вставить("НовыйДокументДата", OLE_Операция.Документ.ДатаДок);	
	НовыйДокументНомер = OLE_Операция.Документ.НомерДок;
	НовыйДокументДата = OLE_Операция.Документ.ДатаДок;	
	Если Не Отказ Тогда
		Для каждого СтруктураДанныхДок Из МассивДанных Цикл
			ИзменитьПризнакДокументВыгружен(СтруктураДанныхДок.ДокументДляВыгрузки, НовыйДокументНомер, НовыйДокументДата);
			Сообщить("СТРОКА "+СтруктураДанныхДок.СтрокаНомер+" Документ выгружен успешно! В 1С 7 создан документ №" + НовыйДокументНомер + " от " + НовыйДокументДата);
		КонецЦикла;                        
	КонецЕсли;

КонецПроцедуры                      

#КонецОбласти   

#Область ПоступлениеУслуг

&НаКлиенте
Процедура ВыгрузитьПоступлениеУслуг(Команда)
	
	ОчиститьСообщения();
	
	БазаOLE = ПодключитьБазу77();
	
	Если БазаOLE = Неопределено Тогда
		Сообщить("Не удалось подключиться к базе 1с7");  
		Возврат;
	Иначе
		Состояние("База 1с7 подключена");
	КонецЕсли;
	
	ТабДокументов = ПодготовитьСписокПоступлениеУслугДляВыгрузкиНаСервере();

	Для каждого СтрДокумент Из ТабДокументов Цикл
		
		Если ПроверитьПризнакДокументВыгружен(СтрДокумент) Тогда
			Сообщить("Документ "+СтрДокумент+ " уже выгружен в базу 1С77!");  
			Продолжить;			
		КонецЕсли;

		Отказ = Ложь; 
		СтруктураДанных = Новый Структура; 
		СтруктураДанных.Вставить("БазаOLE",		БазаOLE);
		СтруктураДанных.Вставить("Документ", 	СтрДокумент);
		
		ПодготовитьПоступлениеУслугДляВыгрузки(СтруктураДанных, Отказ);
		Если Не Отказ Тогда
			
			ВыгрузитьПоступлениеУслугПродолжение(СтруктураДанных); 
		
			ИзменитьПризнакДокументВыгружен(СтрДокумент, СтруктураДанных.НомерДок, СтруктураДанных.ДатаДок);
		
			Сообщить("Документ выгружен успешно! В 1С 7 создан документ №" + СтруктураДанных.НомерДок + " от " + СтруктураДанных.ДатаДок);
	    КонецЕсли;
	
	КонецЦикла;     
	
	ЗаполнитьСписокДокументов(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя);

КонецПроцедуры  

&НаСервере
Функция ПодготовитьСписокПоступлениеУслугДляВыгрузкиНаСервере()
	МассивСсылок = Новый Массив;
	Для каждого СтрТаб Из СписокПоступленийУслуг Цикл  
	    Если СтрТаб.Пометка Тогда
			МассивСсылок.Добавить(СтрТаб.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивСсылок;
КонецФункции // ()

&НаКлиенте
Процедура ПодготовитьПоступлениеУслугДляВыгрузки(СтруктураДанных, Отказ) Экспорт 
	
	Попытка
		//СтруктураДанных.Вставить("БазаOLE",              БазаOLE); 
		СтруктураДанных.Вставить("OLE_Контрагенты",      СтруктураДанных.БазаOLE.CreateObject("Справочник.Контрагенты"));
		СтруктураДанных.Вставить("OLE_СпрДоговоры",      СтруктураДанных.БазаOLE.CreateObject("Справочник.Договоры"));  
		СтруктураДанных.Вставить("OLE_СтатьиИздержекОбращения", СтруктураДанных.БазаOLE.CreateObject("Справочник.СтатьиИздержекОбращения"));  
		СтруктураДанных.Вставить("OLE_Подразделения", 	 СтруктураДанных.БазаOLE.CreateObject("Справочник.Подразделения"));  
		СтруктураДанных.Вставить("OLE_СпрВариантыНДС",   СтруктураДанных.БазаOLE.CreateObject("Справочник.ВариантыРасчетаНалогов")); 
		СтруктураДанных.Вставить("OLE_Номенклатура",  	 СтруктураДанных.БазаOLE.CreateObject("Справочник.Номенклатура")); 
		СтруктураДанных.Вставить("OLE_ДокОперация",      СтруктураДанных.БазаOLE.CreateObject("Документ.Операция"));  
		СтруктураДанных.Вставить("OLE_Операция",         СтруктураДанных.БазаOLE.CreateObject("Операция"));  
		СтруктураДанных.Вставить("OLE_СпрФирмы", 		 СтруктураДанных.БазаOLE.CreateObject("Справочник.Фирмы"));
		СтруктураДанных.Вставить("OLE_Счет",             СтруктураДанных.БазаOLE.CreateObject("Счет"));  
		СтруктураДанных.Вставить("OLE_Документ",    	 СтруктураДанных.БазаOLE.CreateObject("Документ.УслугиСтороннихОрганизаций"));
		
		мНомер = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.Документ, "Номер"));	
		Если СтрДлина(мНомер)>10 Тогда
			мНомер = СтрЗаменить(мНомер,"-0","-");
		КонецЕсли;
		Если СтруктураДанных.OLE_Документ.НайтиПоНомеру(мНомер, ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.Документ, "Дата")) = 1 Тогда
			//ИзменитьПризнакДокументВыгружен(СтруктураДанных.Документ, мНомер, ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.Документ, "Дата"));
			//Отказ = Истина;
			//Сообщить("В базе 1С77 уже есть документ с номером "+мНомер);  
			//Возврат;
		КонецЕсли;
		
		БазаOLE = СтруктураДанных.БазаOLE;  
	
		// Фирма
		мОрганизация = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.Документ, "Организация");
		ОрганизацияИНН = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(мОрганизация, "ИНН"));
		Если СтруктураДанных.OLE_СпрФирмы.НайтиПоРеквизиту("ИНН", ОрганизацияИНН) <> 0 Тогда
			ФирмаОтбора77 = СтруктураДанных.OLE_СпрФирмы.ТекущийЭлемент();
		Иначе
			Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+"Организация " + мОрганизация + " в 1с7 не найдена!");  
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		СтруктураДанных.Вставить("ФирмаОтбора77", ФирмаОтбора77);
		
		// Контрагент
		Контрагент = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.Документ, "Контрагент");
		КонтрагентИНН = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(Контрагент, "ИНН"));
		Если СтруктураДанных.OLE_Контрагенты.НайтиПоРеквизиту("ИНН", КонтрагентИНН, 1) <> 0 Тогда
			Контрагент77 = СтруктураДанных.OLE_Контрагенты.ТекущийЭлемент();
		Иначе
			Сообщить("Контрагент " + Контрагент + " с ИНН " + КонтрагентИНН + " в 1с7 не найден!");  
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		СтруктураДанных.Вставить("Контрагент77", Контрагент77);
		
		// Договор
		OLE_СпрДоговоры = СтруктураДанных.OLE_СпрДоговоры;
		OLE_СпрДоговоры.ИспользоватьВладельца(Контрагент77);  
		
		Договор = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.Документ, "ДоговорКонтрагента");
		ДоговорДата = ПолучитьЗначениеРеквизитаНаСервере(Договор, "Дата");
		Если OLE_СпрДоговоры.НайтиПоРеквизиту("ДатаВозникновенияОбязательства", ДоговорДата, 0) = 1 Тогда
			Договор77 = OLE_СпрДоговоры.ТекущийЭлемент();
		Иначе
			Договор77 = Неопределено;  
		КонецЕсли; 
		//Если OLE_СпрДоговоры.НайтиПоНаименованию("Основной договор", 0, 0) <> 0 Тогда
		//	Договор77 = OLE_СпрДоговоры.ТекущийЭлемент();
		//Иначе
		//	Договор77 = Неопределено;  
		//КонецЕсли; 
		СтруктураДанных.Вставить("Договор77", Договор77);

		// Вариант расчета НДС
		OLE_СпрВариантыНДС     = СтруктураДанных.OLE_СпрВариантыНДС;
		ВариантРасчетаНалога77 = Неопределено;

		СтруктураВариантовРасчетаНалога = ПолучитьСтруктуруВариантовРасчетаНалога(СтруктураДанных.Документ);
		Если СтруктураВариантовРасчетаНалога.СтавкиНДС = "НДС10" Тогда
			// в 1с7 нет ставки НДС 10% ...
		ИначеЕсли СтруктураВариантовРасчетаНалога.СтавкиНДС = "НДС20" Тогда		
			Если СтруктураВариантовРасчетаНалога.НДСВСумме Тогда
				Если OLE_СпрВариантыНДС.НайтиПоНаименованию("НДС в сумме 20%", 0, 0) <> 0 Тогда
					ВариантРасчетаНалога77 = OLE_СпрВариантыНДС.ТекущийЭлемент();
				КонецЕсли;	
			Иначе
				Если OLE_СпрВариантыНДС.НайтиПоНаименованию("НДС сверху 20%", 0, 0) <> 0 Тогда
					ВариантРасчетаНалога77 = OLE_СпрВариантыНДС.ТекущийЭлемент();
				КонецЕсли;	
			КонецЕсли;
		Иначе 
			 //БезНДС
			Если OLE_СпрВариантыНДС.НайтиПоНаименованию("Без налогов", 0, 0) <> 0 Тогда
				ВариантРасчетаНалога77 = OLE_СпрВариантыНДС.ТекущийЭлемент();
			КонецЕсли; 
		КонецЕсли;

		СтруктураДанных.Вставить("ВариантРасчетаНалога77", ВариантРасчетаНалога77);
		//СтруктураДанных.Вставить("НДСВключенВСтоимость", СтруктураВариантовРасчетаНалога.НДСВключенВСтоимость);
		
	//	СтруктураПоказателей = Новый Структура;
	//	ДополнитьСтруктуруПоказателейНаСервере(СтруктураПоказателей, СтруктураВариантовРасчетаНалога.НДСВСумме);
	//	
	//	СтруктураДанных.Вставить("КоличествоПоДокументу", СтруктураПоказателей.КоличествоПоДокументу);
	//	СтруктураДанных.Вставить("СуммаПоДокументу",СтруктураПоказателей.СуммаПоДокументу);
	//	СтруктураДанных.Вставить("СуммаНДС", СтруктураПоказателей.СуммаНДС);
	//	СтруктураДанных.Вставить("СуммаВсего", СтруктураПоказателей.СуммаВсего);
	    МассивСтрок = Новый Массив;   
		МассивУслуги = ПолучитьСтрокиПоступленияУслугНаСервере(СтруктураДанных.Документ, Отказ); 
		Если Отказ Тогда
			Возврат;
		КонецЕсли;

		Для каждого СтрУслуги Из МассивУслуги Цикл
			СтруктураСтроки = Новый Структура;
 			
			СтруктураСтроки.Вставить("Услуга",	СтрУслуги.Номенклатура);					
			СтруктураСтроки.Вставить("НаименованиеУслуги",	СтрУслуги.Содержание);					
			СтруктураСтроки.Вставить("Количество",	СтрУслуги.Количество);					
			СтруктураСтроки.Вставить("Цена",		СтрУслуги.Цена);
			СтруктураСтроки.Вставить("НДС",			СтрУслуги.СуммаНДС);					
			СтруктураСтроки.Вставить("Сумма",		СтрУслуги.Сумма);					
			СтруктураСтроки.Вставить("Всего",		СтрУслуги.Сумма);
			
			СчетИз77 = БазаOLE.СчетПоКоду(СтрУслуги.СчетЗатрат, БазаOLE.ОсновнойПланСчетов());
			Если БазаOLE.ПустоеЗначение(СчетИз77) = 1 ТОгда
				Сообщить("Нет счета " + СтрУслуги.СчетЗатрат+" в 77!!!");  
				Отказ = Истина;
				Возврат;
			КонецЕсли;	
			Если СчетИз77.ЭтоГруппа() = 1 ТОгда
				Сообщить("Счет это группа!!!");  
				Отказ = Истина;
				Возврат;
			КонецЕсли;  
			СтруктураСтроки.Вставить("СчетЗатрат", СчетИз77);					
			
			OLE_СтатьиИздержекОбращения = СтруктураДанных.OLE_СтатьиИздержекОбращения;
			Если OLE_СтатьиИздержекОбращения.НайтиПоНаименованию(СтрУслуги.СтатьяЗатрат, 0, 0) <> 0 Тогда
				СтруктураСтроки.Вставить("Субконто1", OLE_СтатьиИздержекОбращения.ТекущийЭлемент());					
			иначе
				Сообщить(" Не найдена статья издержек: " + СтрУслуги.СтатьяЗатрат + " в 1с7 не найдена!");  
				СтруктураСтроки.Вставить("Субконто1", OLE_СтатьиИздержекОбращения.ТекущийЭлемент());					
			КонецЕсли; 
			
			OLE_Подразделения = СтруктураДанных.OLE_Подразделения;
			Если OLE_Подразделения.НайтиПоНаименованию(СтрУслуги.Подразделение, 0, 0) <> 0 Тогда
				СтруктураСтроки.Вставить("Субконто2", OLE_Подразделения.ТекущийЭлемент());					
			иначе
				Сообщить(" Не найдено Подразделение: " + СтрУслуги.Подразделение + " в 1с7 не найдена!");  
				СтруктураСтроки.Вставить("Субконто2", OLE_Подразделения.ТекущийЭлемент());					
			КонецЕсли; 
			
		    МассивСтрок.Добавить(СтруктураСтроки);
		КонецЦикла;                               
		СтруктураДанных.Вставить("МассивСтрок", МассивСтрок); 
		
	Исключение
		Сообщить("Не удалось выгрузить документ в 1С77! Обратитесь к Администратору 1С");
		БазаOLE = Неопределено;   
		Отказ = Истина;
		Возврат;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокиПоступленияУслугНаСервере(Документ,Отказ)

	МассивСтрок = Новый Массив;
	Для каждого Стр Из Документ.Услуги Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("Номенклатура",Стр.Номенклатура.Наименование);					
		СтруктураСтроки.Вставить("Содержание",	Стр.Содержание);					
		СтруктураСтроки.Вставить("Количество",	Стр.Количество);					
		СтруктураСтроки.Вставить("Цена",		Стр.Цена);
		СтруктураСтроки.Вставить("СуммаНДС",	Стр.СуммаНДС);					
		СтруктураСтроки.Вставить("Сумма",		Стр.Сумма);
		
		Если ЗначениеЗаполнено(Стр.СчетЗатрат) и ЗначениеЗаполнено(Стр.Субконто1) Тогда
			
			СтрПоиска = Новый Структура;
			СтрПоиска.Вставить("Счет",Стр.СчетЗатрат);
			СтрПоиска.Вставить("СтатьяЗатрат",Стр.Субконто1);
			МСтрок = ТаблицаНастроекПоступлениеУслуг.НайтиСтроки(СтрПоиска);
			Если МСтрок.Количество()=0 Тогда
				СтрПоиска = Новый Структура;
				СтрПоиска.Вставить("Счет",Стр.СчетЗатрат);
				МСтрок = ТаблицаНастроекПоступлениеУслуг.НайтиСтроки(СтрПоиска);
			КонецЕсли;	
			Если МСтрок.Количество()=0 Тогда
				СтруктураСтроки.Вставить("СчетЗатрат",Стр.СчетЗатрат.Код);							
				СтруктураСтроки.Вставить("СтатьяЗатрат",Стр.Субконто1.Наименование);
			иначе
				СтруктураСтроки.Вставить("СчетЗатрат",МСтрок[0].СчетЗатрат77);							
				СтруктураСтроки.Вставить("СтатьяЗатрат",?(ЗначениеЗаполнено(МСтрок[0].СтатьяЗатрат77),МСтрок[0].СтатьяЗатрат77,Стр.Субконто1.Наименование));
			КонецЕсли;	
		иначе	
			Отказ = Истина;
			Сообщить("Не указан Счет или Статья затрат "+Документ);
		КонецЕсли;

		Если ЗначениеЗаполнено(Стр.ПодразделениеЗатрат) Тогда
     	 	СтруктураСтроки.Вставить("Подразделение",	Стр.ПодразделениеЗатрат.Наименование); 	
		КонецЕсли;
		
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;         
	
	Возврат МассивСтрок;
	
КонецФункции // ()

&НаКлиенте
Процедура ВыгрузитьПоступлениеУслугПродолжение(СтруктураДанных)
	
	OLE_Документ = СтруктураДанных.OLE_Документ;
	OLE_Фирма    = СтруктураДанных.ФирмаОтбора77;
	OLE_Счет     = СтруктураДанных.OLE_Счет;
	
	Контрагент = СтруктураДанных.Контрагент77; 
	Договор    = СтруктураДанных.Договор77; 
	
	мНомер = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.Документ, "Номер"));
	Если СтрДлина(мНомер)>10 Тогда
		мНомер = СтрЗаменить(мНомер,"-0","-");
	КонецЕсли;

	// Создадим документ 
	OLE_Документ.Новый();  
	OLE_Документ.НомерДок      = мНомер;   
	OLE_Документ.Номер         = Число(ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(OLE_Документ.НомерДок, Истина, Истина));   
	OLE_Документ.ТипИсполнителя = 2;
	
	OLE_Документ.ДатаДок       = ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.Документ, "Дата"); 
	OLE_Документ.Фирма         = OLE_Фирма;  
	OLE_Документ.Журнал        = "14";
	OLE_Документ.ЖурналФирма   = OLE_Документ.Журнал + Формат(OLE_Фирма.Код, "ЧЦ=2; ЧВН=") + "00";
	OLE_Документ.ЖурналКлиент  = OLE_Документ.Журнал + "01" + Контрагент.Код;
	
	OLE_Документ.Контрагент    = Контрагент;
	OLE_Документ.Договор       = ?(Договор = Неопределено, Неопределено, Договор);
	OLE_Документ.Курс          = 1;
	
	OLE_Документ.ДатаНомерСчетаФактуры = ЗаполнитьДатаНомерСчетаФактуры(СтруктураДанных.Документ);
	OLE_Документ.ДатаНомерНакладной    = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.Документ, "НомерВходящегоДокумента")) + " от " + Формат(ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.Документ, "ДатаВходящегоДокумента"), "ДФ=dd.MM.yy");
	//
	//OLE_ПриходныйОрдер.НДСвключатьВСтоимость = НДСВключенВСтоимость; 
	OLE_Документ.ВариантРасчетаНалогов = СтруктураДанных.ВариантРасчетаНалога77; 
	OLE_Документ.Комментарий           = "#Загружено из 1С8 по документу Поступление №" + ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.Документ, "Номер") + " от " + Формат(ПолучитьЗначениеРеквизитаНаСервере(СтруктураДанных.Документ, "Дата"), "ДФ=dd.MM.yyyy");
	
	Для каждого СтрМассива Из СтруктураДанных.МассивСтрок Цикл
		
		OLE_Документ.НоваяСтрока();
		OLE_Документ.НаименованиеУслуги 	= СтрМассива.НаименованиеУслуги; 
		OLE_Документ.Количество 			= СтрМассива.Количество; 
		OLE_Документ.Сумма      			= СтрМассива.Сумма;  
		OLE_Документ.НДС        			= СтрМассива.НДС; 
		OLE_Документ.Всего      			= СтрМассива.Всего; 
		OLE_Документ.КоррСчет      			= СтрМассива.СчетЗатрат; 
		OLE_Документ.НазначитьТип("Субконто1",OLE_Документ.КоррСчет.ВидСубконто(1));
		OLE_Документ.Субконто1     			= СтрМассива.Субконто1; 
		OLE_Документ.НазначитьТип("Субконто2",OLE_Документ.КоррСчет.ВидСубконто(2));
		OLE_Документ.Субконто2     			= СтрМассива.Субконто2; 
		
	КонецЦикла;
	
	
	OLE_Документ.Записать();
	
	Попытка
	    OLE_Документ.Провести();
	Исключение
	   Сообщить("Ошибка проведения в 1с7 Реализация №" + OLE_Документ.Номер + " от " + Формат(OLE_Документ.ДатаДок, "ДФ=dd.MM.yyyy") + ". Попробуйте провести в 1с7 этот документ вручную!");
	КонецПопытки;

	СтруктураДанных.Вставить("НомерДок", OLE_Документ.НомерДок);
	СтруктураДанных.Вставить("ДатаДок", OLE_Документ.ДатаДок);	
	
КонецПроцедуры                      
#КонецОбласти   


&НаСервере
Функция ПроверитьПризнакДокументВыгружен(ДокументРеализации)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Объект",      		ДокументРеализации);
	Запрос.УстановитьПараметр("Свойство",           ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИдентификаторВыгруженногоДокументаВ1С77"));
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	ДополнительныеСведения.Значение КАК Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Свойство = &Свойство
	               |	И ДополнительныеСведения.Объект = &Объект";    
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Рез = Истина;	
	Если Выборка.Следующий() Тогда  
		Если Не ЗначениеЗаполнено(Выборка.Значение) Тогда
			Рез = Ложь;
		КонецЕсли;
	Иначе
		Рез = Ложь;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Рез;

	//Если ЗначениеЗаполнено(ДокументРеализации.Документ1с7Номер) ИЛИ ЗначениеЗаполнено(ДокументРеализации.Документ1с7Дата) Тогда
	//	Возврат Истина;
	//иначе
	//	Возврат Ложь;
	//КонецЕсли;
	
КонецФункции // ()

&НаСервере
Процедура ИзменитьПризнакДокументВыгружен(ДокументРеализации, ДокументНомер, ДокументДата)
	
	//ДокументОбъект = ДокументРеализации.ПолучитьОбъект();
	//
	//ДокументОбъект.Документ1с7Номер = ДокументНомер;
	//ДокументОбъект.Документ1с7Дата  = ДокументДата;
	//ДокументОбъект.Записать();  
	
	НоваяЗапись = РегистрыСведений.ДополнительныеСведения.СоздатьМенеджерЗаписи();
	НоваяЗапись.Объект   = ДокументРеализации;
	НоваяЗапись.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИдентификаторВыгруженногоДокументаВ1С77");
	НоваяЗапись.Значение = ДокументНомер;
	НоваяЗапись.Записать(); 
	
	
КонецПроцедуры // ()

&НаКлиенте
Функция ПодключитьБазу77()
	
	Состояние("Подключение к 77");
	СтруктураПодключения = Новый Структура;
	OLE_КаталогБазы = База77; 
	
	Если НЕ ЗначениеЗаполнено(OLE_КаталогБазы) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось произвести подключение к информационной базе'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	OLE_Пользователь = СокрЛП(Пользователь77);
	OLE_Пароль = СокрЛП(Пароль77);
	OLE_ComОбъект = "";
	OLE_ComОбъект = "V77S.Application";
	МонопольныйРежимOLE = ""; // для монопольного запуска указать " /m"!
	ЗапускБезЗаставки = Истина; // для появления заставки - Ложь
	
	Попытка
		OLE_База = Новый COMОбъект(OLE_ComОбъект); // Получаем доступ к OLE объекту 1С
	Исключение
		Сообщить("Не удалось создать объект 1с77!", СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецПопытки;
	
	РезультатПодключения = OLE_База.Initialize(OLE_База.RMTrade,"/d"+СокрЛП(OLE_КаталогБазы)+" /n"+СокрЛП(OLE_Пользователь)+" /p"+СокрЛП(OLE_Пароль)+МонопольныйРежимOLE,?(ЗапускБезЗаставки,"NO_SPLASH_SHOW",""));
	
	Если РезультатПодключения = 0 Тогда
		Сообщить("Не удалось подключится к указанной базе - проверьте вводные!", СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат OLE_База;
	
КонецФункции

#КонецОбласти   

#Область ПрочиеПроцедуры

&НаКлиенте
Функция ПолучитьПодразделение77(БазаOLE, Подразделение)  
	 
	//OLE_Подразделения = БазаOLE.CreateObject("Справочник.Подразделения");
	//OLE_МестаХранения = БазаOLE.CreateObject("Справочник.МестаХранения");

	//
	//мСтрокаП = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(УправлениеСвойствами.ЗначениеСвойства(Подразделение,"КодовоеОбозначение"), "Наименование"));
	//Если OLE_МестаХранения.НайтиПоРеквизиту("Каталог",мСтрокаП,1) <> 0 Тогда 
	//	Возврат OLE_МестаХранения.Подразделение;
	//иначе
	//	Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Не найдено Подразделение: " + мСтрокаП + " в 1с7 не найдена!");  
	//	Возврат  OLE_Подразделения.ТекущийЭлемент();
	//КонецЕсли; 
	
	
КонецФункции
&НаСервереБезКонтекста
Функция ПолучитьЗначениеСвойстваНаСервере(Знач мОбъект, Знач Реквизит) Экспорт
	Возврат УправлениеСвойствами.ЗначениеСвойства(мОбъект,Реквизит);
КонецФункции
 
&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаНаСервере(Знач мОбъект, Знач Реквизит) Экспорт
		Возврат мОбъект[Реквизит];
КонецФункции

&НаСервереБезКонтекста
Функция ДДСПустаяСсылкаНаСервере() Экспорт
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
КонецФункции

&НаСервере
Функция ЗаполнитьДатаНомерСчетаФактуры(Документ) 
	 
	ДатаНомерСчетаФактуры = "";
	
	СтруктураРеквизитыСФ = УчетНДСПереопределяемый.РеквизитыДляНадписиОСчетеФактуреПолученном(Документ.Ссылка);
	Если СтруктураРеквизитыСФ <> Неопределено Тогда
		
		// Приведем к формату 1с7 "8/10-0027 от 10.08.22"  
		СчетФактураСсылка = СтруктураРеквизитыСФ.Ссылка;
		ДатаНомерСчетаФактуры = СокрЛП(СчетФактураСсылка.НомерВходящегоДокумента) + " от " + Формат(СчетФактураСсылка.ДатаВходящегоДокумента, "ДФ=dd.MM.yy");
	КонецЕсли;
	
	Возврат ДатаНомерСчетаФактуры;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруВариантовРасчетаНалога(Документ) 
	
	СтруктураВариантовНалогов = Новый Структура;
	
	//Если ДокументРеализации.НДСВключенВСтоимость Тогда
	//    СтруктураВариантовНалогов.Вставить("НДСВключенВСтоимость", Истина);
	//Иначе
	//	СтруктураВариантовНалогов.Вставить("НДСВключенВСтоимость", Ложь);
	//КонецЕсли;
	
	Если Документ.СуммаВключаетНДС Тогда
	    СтруктураВариантовНалогов.Вставить("НДСВСумме", Истина);
	Иначе
		СтруктураВариантовНалогов.Вставить("НДСВСумме", Ложь);
	КонецЕсли;
	
	ТабЧастьТовары = Документ.Услуги;
    ПерваяСтрока = ТабЧастьТовары[0];
	Если ПерваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		СтруктураВариантовНалогов.Вставить("СтавкиНДС", "НДС10");
	ИначеЕсли ПерваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		СтруктураВариантовНалогов.Вставить("СтавкиНДС", "НДС20");
	Иначе
		 СтруктураВариантовНалогов.Вставить("СтавкиНДС", "БезНДС");
	КонецЕсли;
	
	Возврат СтруктураВариантовНалогов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДокументов(ТекущаяСтраница)
	Если ТекущаяСтраница = "ГруппаРеализации" Тогда    
		ЗаполнитьРеализации();
	ИначеЕсли ТекущаяСтраница = "ГруппаРасшифровкаПП" Тогда
		ЗаполнитьРасшифровкаПП();	
	ИначеЕсли ТекущаяСтраница = "ГруппаБанковскиеВыписки" Тогда
		ЗаполнитьБанковскиеВыписки();	
	ИначеЕсли ТекущаяСтраница = "ГруппаПоступлениеУслуг" Тогда
		ЗаполнитьПоступлениеУслуг();	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеализации()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
				"ВЫБРАТЬ 
				|	ДополнительныеСведения.Объект КАК Объект,
				|	ДополнительныеСведения.Значение КАК Значение
				|ПОМЕСТИТЬ ВТ_Доп
				|ИЗ
				|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				|ГДЕ
				|	ДополнительныеСведения.Свойство = &Свойство
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА ДокументРеализацияТоваровУслуг.РучнаяКорректировка = ИСТИНА
				|			ТОГДА ВЫБОР
				|					КОГДА ДокументРеализацияТоваровУслуг.ПометкаУдаления = ИСТИНА
				|						ТОГДА 10
				|					КОГДА ДокументРеализацияТоваровУслуг.Проведен = ЛОЖЬ
				|						ТОГДА 9
				|					ИНАЧЕ 8
				|				КОНЕЦ
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ДокументРеализацияТоваровУслуг.ПометкаУдаления = ИСТИНА
				|					ТОГДА 2
				|				КОГДА ДокументРеализацияТоваровУслуг.Проведен = ИСТИНА
				|					ТОГДА 1
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|	КОНЕЦ КАК СостояниеДокумента,
				|	ДокументРеализацияТоваровУслуг.Ссылка КАК Ссылка,
				|	ДокументРеализацияТоваровУслуг.Дата КАК Дата,
				|	ДокументРеализацияТоваровУслуг.Номер КАК Номер,
				|	ДокументРеализацияТоваровУслуг.Организация КАК Организация,
				|	ДокументРеализацияТоваровУслуг.Ответственный КАК Ответственный,
				|	ДокументРеализацияТоваровУслуг.Контрагент КАК Контрагент,
				|	ДокументРеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
				|	ДокументРеализацияТоваровУслуг.Комментарий КАК Комментарий,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ВТ_Доп.Значение, """") = """"
				|			ТОГДА ""Не выгружен""
				|		ИНАЧЕ ВТ_Доп.Значение
				|	КОНЕЦ КАК НомерДата_77
				|ИЗ
				|	Документ.РеализацияТоваровУслуг КАК ДокументРеализацияТоваровУслуг
				|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
				|		ПО ДокументРеализацияТоваровУслуг.Организация = СтатусыДокументов.Организация
				|			И ДокументРеализацияТоваровУслуг.Ссылка = СтатусыДокументов.Документ}
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
				|		ПО ДокументРеализацияТоваровУслуг.ДоговорКонтрагента = ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Доп КАК ВТ_Доп
				|		ПО ДокументРеализацияТоваровУслуг.Ссылка = ВТ_Доп.Объект
				|ГДЕ
				|	ДокументРеализацияТоваровУслуг.Проведен
				|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство.Имя = ""ТипДоговора""
				|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Значение.Наименование = ""Аренда""
				|	И ДокументРеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
				|	И ВЫБОР
				|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ ДокументРеализацияТоваровУслуг.Организация = &Организация
				|		КОНЕЦ
				|	И ВЫБОР
				|			КОГДА &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ ДокументРеализацияТоваровУслуг.Контрагент = &Контрагент
				|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДатаНачала",Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("Организация",ВыбОрганизация);
	Запрос.УстановитьПараметр("Контрагент",ВыбКонтрагент);
	Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИдентификаторВыгруженногоДокументаВ1С77"));
	
	
	СписокРеализаций.Загрузить(Запрос.Выполнить().Выгрузить());
	Элементы.СписокРеализаций.Обновить();
   
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасшифровкаПП()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА РасшифровкаПлатежногоПоручения.РучнаяКорректировка = ИСТИНА
			|			ТОГДА ВЫБОР
			|					КОГДА РасшифровкаПлатежногоПоручения.ПометкаУдаления = ИСТИНА
			|						ТОГДА 10
			|					КОГДА РасшифровкаПлатежногоПоручения.Проведен = ЛОЖЬ
			|						ТОГДА 9
			|					ИНАЧЕ 8
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА РасшифровкаПлатежногоПоручения.ПометкаУдаления = ИСТИНА
			|					ТОГДА 2
			|				КОГДА РасшифровкаПлатежногоПоручения.Проведен = ИСТИНА
			|					ТОГДА 1
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СостояниеДокумента,
			|	РасшифровкаПлатежногоПоручения.Ссылка КАК Ссылка,
			|	РасшифровкаПлатежногоПоручения.Дата КАК Дата,
			|	РасшифровкаПлатежногоПоручения.Номер КАК Номер,
			|	РасшифровкаПлатежногоПоручения.Организация КАК Организация,
			|	РасшифровкаПлатежногоПоручения.Ответственный КАК Ответственный,
			|	РасшифровкаПлатежногоПоручения.Контрагент КАК Контрагент,
			|	РасшифровкаПлатежногоПоручения.СуммаДокумента КАК СуммаДокумента,
			|	РасшифровкаПлатежногоПоручения.Комментарий КАК Комментарий,
			|	ВЫБОР
			|		КОГДА РасшифровкаПлатежногоПоручения.Документ1с7Номер = """"
			|			ТОГДА "" Не выгружено""
			|		ИНАЧЕ ""№ "" + РасшифровкаПлатежногоПоручения.Документ1с7Номер
			|	КОНЕЦ КАК НомерДата_77
			|ИЗ
			|	Документ.РасшифровкаПлатежногоПоручения КАК РасшифровкаПлатежногоПоручения
			|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
			|		ПО РасшифровкаПлатежногоПоручения.Организация = СтатусыДокументов.Организация
			|			И РасшифровкаПлатежногоПоручения.Ссылка = СтатусыДокументов.Документ}
			|ГДЕ
			|	РасшифровкаПлатежногоПоручения.Проведен
			|	И РасшифровкаПлатежногоПоручения.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И ВЫБОР
			|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ РасшифровкаПлатежногоПоручения.Организация = &Организация
			|		КОНЕЦ
			|	И ВЫБОР
			|			КОГДА &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ РасшифровкаПлатежногоПоручения.Контрагент = &Контрагент
			|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДатаНачала",Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("Организация",ВыбОрганизация);
	Запрос.УстановитьПараметр("Контрагент",ВыбКонтрагент);
	
	СписокРасшифровкаПП.Загрузить(Запрос.Выполнить().Выгрузить());
	Элементы.СписокРасшифровкаПП.Обновить();
  
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБанковскиеВыписки()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополнительныеСведения.Объект КАК Объект,
			|	ДополнительныеСведения.Значение КАК Значение
			|ПОМЕСТИТЬ ВТ_Доп
			|ИЗ
			|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
			|ГДЕ
			|	ДополнительныеСведения.Свойство = &Свойство
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ЖурналДокументовБанковскиеВыписки.Ссылка ССЫЛКА Документ.СписаниеСРасчетногоСчета
			|			ТОГДА ВЫРАЗИТЬ(ЖурналДокументовБанковскиеВыписки.Ссылка КАК Документ.СписаниеСРасчетногоСчета)
			|		ИНАЧЕ ВЫРАЗИТЬ(ЖурналДокументовБанковскиеВыписки.Ссылка КАК Документ.ПоступлениеНаРасчетныйСчет)
			|	КОНЕЦ КАК Ссылка,
			|	ЖурналДокументовБанковскиеВыписки.Дата КАК Дата,
			|	ЖурналДокументовБанковскиеВыписки.Номер КАК Номер,
			|	ЖурналДокументовБанковскиеВыписки.Организация КАК Организация,
			|	ЖурналДокументовБанковскиеВыписки.БанковскийСчет КАК БанковскийСчет,
			|	ЖурналДокументовБанковскиеВыписки.Контрагент КАК Контрагент,
			|	ЖурналДокументовБанковскиеВыписки.Доход КАК Поступление,
			|	ЖурналДокументовБанковскиеВыписки.Расход КАК Списание,
			|	ЖурналДокументовБанковскиеВыписки.Валюта КАК Валюта,
			|	ЖурналДокументовБанковскиеВыписки.ВидОперации КАК ВидОперации,
			|	ЖурналДокументовБанковскиеВыписки.НазначениеПлатежа КАК НазначениеПлатежа,
			|	ЖурналДокументовБанковскиеВыписки.Ответственный КАК Ответственный,
			|	ЖурналДокументовБанковскиеВыписки.Комментарий КАК Комментарий,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ВТ_Доп.Значение, """") = """"
			|			ТОГДА ""Не выгружен""
			|		ИНАЧЕ ВТ_Доп.Значение
			|	КОНЕЦ КАК НомерДата_77,
			|	ВЫБОР
			|		КОГДА ЖурналДокументовБанковскиеВыписки.РучнаяКорректировка = ИСТИНА
			|			ТОГДА ВЫБОР
			|					КОГДА ЖурналДокументовБанковскиеВыписки.ПометкаУдаления = ИСТИНА
			|						ТОГДА 10
			|					КОГДА ЖурналДокументовБанковскиеВыписки.Проведен = ЛОЖЬ
			|						ТОГДА 9
			|					ИНАЧЕ 8
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ЖурналДокументовБанковскиеВыписки.ПометкаУдаления = ИСТИНА
			|					ТОГДА 2
			|				КОГДА ЖурналДокументовБанковскиеВыписки.Проведен = ИСТИНА
			|					ТОГДА 1
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК СостояниеДокумента
			|ИЗ
			|	ЖурналДокументов.Деньги КАК ЖурналДокументовБанковскиеВыписки
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Доп КАК ВТ_Доп
			|		ПО ЖурналДокументовБанковскиеВыписки.Ссылка = ВТ_Доп.Объект
			|ГДЕ
			|	(ЖурналДокументовБанковскиеВыписки.Ссылка ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
			|			ИЛИ ЖурналДокументовБанковскиеВыписки.Ссылка ССЫЛКА Документ.СписаниеСРасчетногоСчета)
			|	И ЖурналДокументовБанковскиеВыписки.Проведен
			|	И ЖурналДокументовБанковскиеВыписки.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|	И ВЫБОР
			|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЖурналДокументовБанковскиеВыписки.Организация = &Организация
			|		КОНЕЦ
			|	И ВЫБОР
			|			КОГДА &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЖурналДокументовБанковскиеВыписки.Контрагент = &Контрагент
			|		КОНЕЦ
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка";
	
	
	Запрос.УстановитьПараметр("ДатаНачала",Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("Организация",ВыбОрганизация);
	Запрос.УстановитьПараметр("Контрагент",ВыбКонтрагент);
	Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИдентификаторВыгруженногоДокументаВ1С77"));
	СписокБанковскиеВыписки.Загрузить(Запрос.Выполнить().Выгрузить());
	СписокБанковскиеВыписки.Сортировать("Дата");
	Ном = 1;
	Для каждого Стр Из СписокБанковскиеВыписки Цикл
		Стр.СтрокаНомер = Ном;	
		Ном = Ном+1;
	КонецЦикла;
	Элементы.СписокБанковскиеВыписки.Обновить();
  
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоступлениеУслуг()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДополнительныеСведения.Объект КАК Объект,
				|	ДополнительныеСведения.Значение КАК Значение
				|ПОМЕСТИТЬ ВТ_Доп
				|ИЗ
				|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
				|ГДЕ
				|	ДополнительныеСведения.Свойство = &Свойство
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА ПоступлениеТоваровУслуг.РучнаяКорректировка = ИСТИНА
				|			ТОГДА ВЫБОР
				|					КОГДА ПоступлениеТоваровУслуг.ПометкаУдаления = ИСТИНА
				|						ТОГДА 10
				|					КОГДА ПоступлениеТоваровУслуг.Проведен = ЛОЖЬ
				|						ТОГДА 9
				|					ИНАЧЕ 8
				|				КОНЕЦ
				|		ИНАЧЕ ВЫБОР
				|				КОГДА ПоступлениеТоваровУслуг.ПометкаУдаления = ИСТИНА
				|					ТОГДА 2
				|				КОГДА ПоступлениеТоваровУслуг.Проведен = ИСТИНА
				|					ТОГДА 1
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|	КОНЕЦ КАК СостояниеДокумента,
				|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
				|	ПоступлениеТоваровУслуг.Дата КАК Дата,
				|	ПоступлениеТоваровУслуг.Номер КАК Номер,
				|	ПоступлениеТоваровУслуг.Организация КАК Организация,
				|	ПоступлениеТоваровУслуг.Ответственный КАК Ответственный,
				|	ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
				|	ПоступлениеТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
				|	ПоступлениеТоваровУслуг.Комментарий КАК Комментарий,
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ВТ_Доп.Значение, """") = """"
				|			ТОГДА ""Не выгружен""
				|		ИНАЧЕ ВТ_Доп.Значение
				|	КОНЕЦ КАК НомерДата_77
				|ИЗ
				|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументов КАК СтатусыДокументов
				|		ПО ПоступлениеТоваровУслуг.Ссылка = СтатусыДокументов.Документ
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Доп КАК ВТ_Доп
				|		ПО ПоступлениеТоваровУслуг.Ссылка = ВТ_Доп.Объект
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов.ДополнительныеРеквизиты КАК ДоговорыКонтрагентовДополнительныеРеквизиты
				|		ПО ПоступлениеТоваровУслуг.ДоговорКонтрагента = ДоговорыКонтрагентовДополнительныеРеквизиты.Ссылка
				|ГДЕ
				|	ПоступлениеТоваровУслуг.Проведен
				|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Свойство.Имя = ""ТипДоговора""
				|	И ДоговорыКонтрагентовДополнительныеРеквизиты.Значение.Наименование = ""Аренда""
				|	И ПоступлениеТоваровУслуг.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
				|	И ВЫБОР
				|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ ПоступлениеТоваровУслуг.Организация = &Организация
				|		КОНЕЦ
				|	И ВЫБОР
				|			КОГДА &Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ ПоступлениеТоваровУслуг.Контрагент = &Контрагент
				|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДатаНачала",Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания",КонецДня(Объект.КонецПериода));
	Запрос.УстановитьПараметр("Организация",ВыбОрганизация);
	Запрос.УстановитьПараметр("Контрагент",ВыбКонтрагент);
	Запрос.УстановитьПараметр("Свойство",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ИдентификаторВыгруженногоДокументаВ1С77"));
	
	
	СписокПоступленийУслуг.Загрузить(Запрос.Выполнить().Выгрузить());
	Элементы.СписокПоступленийУслуг.Обновить();
   
КонецПроцедуры
 
&НаСервере
Функция ПреобразоватьСчетПоКоду(КодСчета) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодСчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПреобразоватьСтрокуБезЛидирующегоНуля(КодСчета);
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуБезЛидирующегоНуля(СтрокаИсходная)
	
	ПерваяСтрока = "";
	ВтораяСтрока = "";
	ТретьяСтрока = "";
	
	ПервыйРазделить = Истина;
	ВторойРазделить = Ложь;
	ТретийРазделить = Ложь;
	
	Для Индекс = 1 По СтрДлина(СтрокаИсходная) Цикл
		
		Символ = Сред(СтрокаИсходная, Индекс, 1);
		
		Если ПервыйРазделить Тогда
			ПерваяСтрока = ПерваяСтрока + ?(Символ = ".", "", Символ);
			
			Если Символ = "." Тогда
				ПервыйРазделить = Ложь;
				ВторойРазделить = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ВторойРазделить Тогда
			// преобразуем, например, 44.01.1 - а должно быть 44.1.1 В этом случаем добавляем убираем 0  
			ВтораяСтрока = СтрЗаменить(Прав(СтрокаИсходная, Индекс - 1), 0, ""); 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПерваяСтрока + ВтораяСтрока;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНастройкиНаСервере()
	
	ПолучитьНастройкиСчетов();
	
	НастройкиТаблицей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиВыгрузкиВ77", "ТаблицаНастроекПоСчетамУчета",,,);
	Если НастройкиТаблицей = Неопределено Тогда
	иначе
		ТаблицаНастроекПоСчетамУчета.Загрузить(НастройкиТаблицей);		
	КонецЕсли;	
	
	НастройкиТаблицейПП = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиВыгрузкиВ77", "ТаблицаНастроекРасшафровкаПП",,,);
	Если НастройкиТаблицейПП = Неопределено Тогда
	иначе
		ТаблицаНастроекРасшафровкаПП.Загрузить(НастройкиТаблицейПП);		
	КонецЕсли;	
	
	НастройкиТаблицейПУ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиВыгрузкиВ77", "ТаблицаНастроекПоступлениеУслуг",,,);
	Если НастройкиТаблицейПУ = Неопределено Тогда
	иначе
		ТаблицаНастроекПоступлениеУслуг.Загрузить(НастройкиТаблицейПУ);		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиСчетов() 
	
	Объект.СписокСчетовДляПереноса.Очистить();  

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01.1");
	НСтрока.Счет77 = "44.1.1";
	НСтрока.Субконто1 = "ИздержкиОбращения";
	
		НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01.2");
	НСтрока.Счет77 = "44.1.2";
	НСтрока.Субконто1 = "ИздержкиОбращения";
	
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("44.01.3");
	НСтрока.Счет77 = "44.1.3";
	НСтрока.Субконто1 = "ИздержкиОбращения";

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("51");	
	НСтрока.Счет77 = "51";

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.01");
	НСтрока.Счет77 = "57.1";

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.03");
	НСтрока.Счет77 = "57.3";
   	НСтрока.Субконто1 = "Контрагенты";
 	НСтрока.Субконто2 = "Договоры";

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.04.1");
	НСтрока.Счет77 = "57.4.1";
	НСтрока.Субконто1 = "МестаХранения";
	
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.04.2");
	НСтрока.Счет77 = "57.4.2";
 	НСтрока.Субконто1 = "МестаХранения";

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("58.03");
	НСтрока.Счет77 = "58.3";
  	НСтрока.Субконто1 = "Контрагенты";
 	НСтрока.Субконто2 = "Договоры";

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
	НСтрока.Счет77 = "60.1.1";
  	НСтрока.Субконто1 = "Контрагенты";
 	НСтрока.Субконто2 = "Договоры";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");
	НСтрока.Счет77 = "60.2";
  	НСтрока.Субконто1 = "Контрагенты";
 	НСтрока.Субконто2 = "Договоры";

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
	НСтрока.Счет77 = "62.1";
  	НСтрока.Субконто1 = "Контрагенты";
 	НСтрока.Субконто2 = "Договоры";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
	НСтрока.Счет77 = "62.2";
  	НСтрока.Субконто1 = "Контрагенты";
 	НСтрока.Субконто2 = "Договоры";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.05");
	НСтрока.Счет77 = "62.5";
  	НСтрока.Субконто1 = "Контрагенты";
 	НСтрока.Субконто2 = "Договоры";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.06");
	НСтрока.Счет77 = "62.6";
  	НСтрока.Субконто1 = "Контрагенты";
 	НСтрока.Субконто2 = "Договоры";

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.01.1");
	НСтрока.Счет77 = "68.1";
  	НСтрока.Субконто1 = "ВидыПлатежейВБюджет";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.02");
	НСтрока.Счет77 = "68.2";
  	НСтрока.Субконто1 = "ВидыПлатежейВБюджет";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.04.1");
	НСтрока.Счет77 = "68.4.1";
  	НСтрока.Субконто1 = "ВидыПлатежейВБюджет";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.10");
	НСтрока.Счет77 = "68.10";
  	НСтрока.Субконто1 = "ВидыПлатежейВБюджет";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.10");
	НСтрока.Счет77 = "68.10";
  	НСтрока.Субконто1 = "ВидыПлатежейВБюджет";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("68.11");
	НСтрока.Счет77 = "68.11";
  	НСтрока.Субконто1 = "ВидыПлатежейВБюджет";

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.01");
	НСтрока.Счет77 = "69.1";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.1");
	НСтрока.Счет77 = "69.2.1";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.1");
	НСтрока.Счет77 = "69.2.2";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.2");
	НСтрока.Счет77 = "69.2.3";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.02.7");
	НСтрока.Счет77 = "69.2.7";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.03.1");
	НСтрока.Счет77 = "69.3.1";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.03.2");
	НСтрока.Счет77 = "69.3.2";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("69.11");
	НСтрока.Счет77 = "69.11";

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("70");
	НСтрока.Счет77 = "70";
  	НСтрока.Субконто1 = "Сотрудники";

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("73.03");
	НСтрока.Счет77 = "73.3";
  	НСтрока.Субконто1 = "Сотрудники";

	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.02");
	НСтрока.Счет77 = "76.2";
  	НСтрока.Субконто1 = "Контрагенты";
 	НСтрока.Субконто2 = "Договоры";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.05");
	НСтрока.Счет77 = "76.5.1";  
  	НСтрока.Субконто1 = "Контрагенты";
 	НСтрока.Субконто2 = "Договоры";
	
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("79.03");
	НСтрока.Счет77 = "79.3";
   	НСтрока.Субконто1 = "Контрагенты";
 	НСтрока.Субконто2 = "Договоры";


	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.01");
	НСтрока.Счет77 = "91.1";
   	НСтрока.Субконто1 = "ПрочиеДоходыИРасходы";
	НСтрока = Объект.СписокСчетовДляПереноса.Добавить();
	НСтрока.Счет8 = ПланыСчетов.Хозрасчетный.НайтиПоКоду("91.02");
	НСтрока.Счет77 = "91.2";
   	НСтрока.Субконто1 = "ПрочиеДоходыИРасходы";
	                 
	//Для каждого СтрТ Из Объект.СписокСчетовДляПереноса Цикл
	//	СтрТ.Переносить = Истина;
	//КонецЦикла;

		
КонецПроцедуры

&НаСервере
Функция ОпределитьТипВыписки(Док) Экспорт
	СтруктураВозврата = Новый Структура;  
	СтруктураВозврата.Вставить("ТипВыписки","");	
	СтруктураВозврата.Вставить("Счет","");
	СтруктураВозврата.Вставить("СчетКод","");
	СтруктураВозврата.Вставить("ВидСубконто1","");	
	СтруктураВозврата.Вставить("ВидСубконто2","");	
	СтруктураВозврата.Вставить("Субконто1","");	
	СтруктураВозврата.Вставить("Субконто2","");	
	//СтруктураВозврата.Вставить("Субконто3","");	
	СтруктураВозврата.Вставить("Сумма",0);	

	СписокСчетов = Объект.СписокСчетовДляПереноса.Выгрузить();	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйДвиженияССубконто.СчетДт КАК СчетДт,
	               |	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	               |	ХозрасчетныйДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	               |	ХозрасчетныйДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	               |	ХозрасчетныйДвиженияССубконто.СчетКт КАК СчетКт,
	               |	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	               |	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	               |	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	               |	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	               |	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	               |	ХозрасчетныйДвиженияССубконто.Содержание КАК Содержание
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(, , Регистратор = &ссылка, , ) КАК ХозрасчетныйДвиженияССубконто";
	
	Запрос.УстановитьПараметр("ссылка", Док);
	
	ТД = Запрос.Выполнить().Выгрузить();
	
	Если ТипЗнч(Док) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда  
		Для каждого СтрТД Из ТД Цикл
			Если СтрТД.СчетКт = ПланыСчетов.Хозрасчетный.РасчетныеСчета Тогда
				СтруктураВозврата.Вставить("ТипВыписки","Расход");	
				СтруктураВозврата.Вставить("Счет",СтрТД.СчетДт); 
				СтруктураВозврата.Вставить("СчетКод",СтрТД.СчетДт.Код);
				Рез = СписокСчетов.Найти(СтрТД.СчетДт,"Счет8");  
				Если Рез <> Неопределено Тогда
					СтруктураВозврата.Вставить("СчетКод",Рез.Счет77);
					СтруктураВозврата.Вставить("ВидСубконто1",Рез.Субконто1);	
					СтруктураВозврата.Вставить("ВидСубконто2",Рез.Субконто2);	
				КонецЕсли;
				
				СтруктураВозврата.Вставить("Субконто1",СтрТД.СубконтоДт1);	
				СтруктураВозврата.Вставить("Субконто2",СтрТД.СубконтоДт2);	
				//СтруктураВозврата.Вставить("Субконто3",СтрТД.СубконтоДт3);	
				СтруктураВозврата.Вставить("Сумма",СтрТД.Сумма);	
				СтруктураВозврата.Вставить("Содержание",СтрТД.Содержание);	
				Прервать;
			КонецЕсли;
		КонецЦикла;
	иначе
		Для каждого СтрТД Из ТД Цикл
			Если СтрТД.СчетДт = ПланыСчетов.Хозрасчетный.РасчетныеСчета Тогда
				СтруктураВозврата.Вставить("ТипВыписки","Приход");	
				СтруктураВозврата.Вставить("Счет",СтрТД.СчетКт); 
				СтруктураВозврата.Вставить("СчетКод",СтрТД.СчетКт.Код);
				Рез = СписокСчетов.Найти(СтрТД.СчетКт,"Счет8");
				Если Рез <> Неопределено Тогда
					СтруктураВозврата.Вставить("СчетКод",Рез.Счет77);
					СтруктураВозврата.Вставить("ВидСубконто1",Рез.Субконто1);	
					СтруктураВозврата.Вставить("ВидСубконто2",Рез.Субконто2);	
				КонецЕсли;
				СтруктураВозврата.Вставить("Субконто1",СтрТД.СубконтоКт1);	
				СтруктураВозврата.Вставить("Субконто2",СтрТД.СубконтоКт2);	
				//СтруктураВозврата.Вставить("Субконто3",СтрТД.СубконтоКт3);	
				СтруктураВозврата.Вставить("Сумма",СтрТД.Сумма);	
				СтруктураВозврата.Вставить("Содержание",СтрТД.Содержание);	
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// 57, без субконто
	// 60,62 Контрагент, Договор
	// 68,69 Платежи в фонды
	// 73 сотрудники
	// 76 Контрагент, Договор
	// 79.3 Контрагент, Договор
	
	Возврат СтруктураВозврата; 
	 
КонецФункции 

&НаСервере
Процедура ОпределитьНастройкиСчетов(Док, СтрПроводок) Экспорт  
	
	СтрПоиска = Новый Структура;
	СтрПоиска.Вставить("Счет8",СтрПроводок.Счет);
	СтрПоиска.Вставить("СтатьяДДС",Док.СтатьяДвиженияДенежныхСредств);
	МСтрок = ТаблицаНастроекПоСчетамУчета.НайтиСтроки(СтрПоиска);
	Если МСтрок.Количество()<>0 Тогда                       
		СтрПроводок.Вставить("Счет77",МСтрок[0].Счет77);	
		СтрПроводок.Вставить("СтатьяДДС77", МСтрок[0].СтатьяДДС.Наименование);   
		Если ЗначениеЗаполнено(МСтрок[0].СчетЗатрат77) Тогда
			СтрПроводок.Вставить("СчетЗатрат77", МСтрок[0].СчетЗатрат77);	
			СтрПроводок.Вставить("СтатьяЗатрат77", МСтрок[0].СтатьяЗатрат77);	
		КонецЕсли;  
	иначе
		СтрПоиска = Новый Структура;
		СтрПоиска.Вставить("Счет8",СтрПроводок.Счет);
		СтрПоиска.Вставить("СтатьяДДС",Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
		МСтрок = ТаблицаНастроекПоСчетамУчета.НайтиСтроки(СтрПоиска);
		Если МСтрок.Количество()<>0 Тогда    
			СтрПроводок.Вставить("Счет77",МСтрок[0].Счет77);	
			СтрПроводок.Вставить("СтатьяДДС77", "");   
			Если ЗначениеЗаполнено(МСтрок[0].СчетЗатрат77) Тогда
				СтрПроводок.Вставить("СчетЗатрат77", МСтрок[0].СчетЗатрат77);	
				СтрПроводок.Вставить("СтатьяЗатрат77", МСтрок[0].СтатьяЗатрат77);	
			КонецЕсли;  
		иначе
			СтрПроводок.Вставить("Счет77",СтрПроводок.СчетКод);	
			СтрПроводок.Вставить("СтатьяДДС77",Док.СтатьяДвиженияДенежныхСредств.Наименование);
		КонецЕсли;   
	КонецЕсли;   
	
	Если ТипЗнч(Док.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение")  Тогда
		//РасшифровкаПлатежногоПоручения
		РасшПП = Док.ДокументОснование.ДокументРасшифровкаПлатежногоПоручения;//Документы.РасшифровкаПлатежногоПоручения.НайтиПоРеквизиту("ДокументОснование",Док.ДокументОснование);
		Сообщить("_"+РасшПП);
		Если ЗначениеЗаполнено(РасшПП) Тогда
			Если РасшПП.ТаблицаРасшифровки.Количество() > 0 Тогда
				МассивСтрРасшПП = Новый Массив;
				Для каждого СтрРасш Из РасшПП.ТаблицаРасшифровки Цикл
					
					СтрРасшПП = Новый Структура;	
					
					СтрПоиска = Новый Структура;
					СтрПоиска.Вставить("Счет8",СтрРасш.СчетЗатрат);
					СтрПоиска.Вставить("СтатьяЗатрат",СтрРасш.СтатьяЗатрат);
					МСтрок = ТаблицаНастроекРасшафровкаПП.НайтиСтроки(СтрПоиска);
					Если МСтрок.Количество()=0 Тогда
						СтрПоиска = Новый Структура;
						СтрПоиска.Вставить("Счет8",СтрРасш.СчетЗатрат);
						МСтрок = ТаблицаНастроекРасшафровкаПП.НайтиСтроки(СтрПоиска);
					КонецЕсли;	
					Если МСтрок.Количество()=0 Тогда
						СтрРасшПП.Вставить("СчетЗатрат",СтрРасш.СчетЗатрат.Код);							
						СтрРасшПП.Вставить("СтатьяЗатрат",СтрРасш.СтатьяЗатрат.Наименование);
					иначе
						СтрРасшПП.Вставить("СчетЗатрат",МСтрок[0].СчетЗатрат77);							
						СтрРасшПП.Вставить("СтатьяЗатрат",?(ЗначениеЗаполнено(МСтрок[0].СтатьяЗатрат77),МСтрок[0].СтатьяЗатрат77,СтрРасш.СтатьяЗатрат.Наименование));
					КонецЕсли;	
					
					СтрРасшПП.Вставить("Подразделение",СтрРасш.Подразделение);							
					СтрРасшПП.Вставить("Содержание",СтрРасш.Содержание);							
					СтрРасшПП.Вставить("Сумма",СтрРасш.Сумма);							
					СтрРасшПП.Вставить("СуммаНДС",СтрРасш.СуммаНДС);							
					
					МассивСтрРасшПП.Добавить(СтрРасшПП);
				КонецЦикла;
			
				СтрПроводок.Вставить("РасшифровкаПП", МассивСтрРасшПП);	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСчет77(БазаOLE, СчетКод, СтруктураДанных)
		//СчетИз77 = БазаOLE.СчетПоКоду(СчетКод, БазаOLE.ОсновнойПланСчетов());
		//Если БазаOLE.ПустоеЗначение(СчетИз77) = 1 ТОгда
		//	Сообщить("СТРОКА "+СтруктураДанных.СтрокаНомер+" Нет счета"+СтрПроводок.Счет77 +" в 77!!!");  
		//	Отказ = Истина;
		//	Возврат;
		//КонецЕсли;	
		//Если СчетИз77.ЭтоГруппа() = 1 ТОгда
		//	Сообщить("Счет это группа!!!");  
		//	Отказ = Истина;
		//	Возврат;
		//КонецЕсли;  
	
КонецФункции	

&НаКлиенте
Процедура ПолучитьСписокИБ() 
	
	Попытка
		ScrptCtrl=Новый COMObject("MSScriptControl.ScriptControl");
		ScrptCtrl.Language="vbscript";
		ScrptCtrl.AddCode("
		|Function Get1CV77Titles()
		|	const HKEY_CURRENT_USER = &H80000001
		|	Set oReg=GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv"")
		|	strKeyPath = ""Software\1C\1Cv7\7.7\Titles""
		|	oReg.EnumValues HKEY_CURRENT_USER, strKeyPath, arrValues
		|	strInfo=vbNullString
		|   Get1CV77Titles = strInfo
		|	On Error Resume Next
		|	For i = LBound(arrValues) To UBound(arrValues)
		|		call oReg.GetStringValue(HKEY_CURRENT_USER,strKeyPath,arrValues(i),Value)
		|		strInfo=strInfo & arrValues(i) & vbTab & Value & vbCrLf
		|	Next		
		| 	Get1CV77Titles = strInfo
		|End Function
		|");
		Текст=СокрЛП(ScrptCtrl.Run("Get1CV77Titles"));
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ТаблицаПути.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуПути(Текст); 
	
	Для каждого СтрТ Из ТаблицаПути Цикл
		Элементы.База77.СписокВыбора.Добавить(СтрТ.Путь, СтрТ.Имя);	
	КонецЦикла;           
	
	База77 = "\\192.168.201.14\db22\"; 
	//База77 = "\\192.168.201.14\db22_test\"; // для тестирования
	База77ПриИзменении(Элементы.База77);    
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуПути(Текст)
	
	ТаблицаИБ = Новый ТаблицаЗначений;
	ТаблицаИБ.Колонки.Добавить("Имя");
	ТаблицаИБ.Колонки.Добавить("Путь");
	ТаблицаИБ.Колонки.Добавить("Пользователь");
	ТаблицаИБ.Колонки.Добавить("Пароль");
	
	Для Ном = 1 По СтрЧислоСтрок(Текст) Цикл
		СтрБазы = СтрПолучитьСтроку(Текст,Ном);
		Разд = СтрНайти(СтрБазы,Символы.Таб);
		Путь = Лев(СтрБазы,Разд-1);
		Название = Прав(СтрБазы,СтрДлина(СтрБазы)-Разд);
		
		НоваяСтрока = ТаблицаИБ.Добавить();
		НоваяСтрока.Имя = Название;
		НоваяСтрока.Путь = Путь; 
		
		Если АльтернативныйПользовательПодключения Тогда
			НоваяСтрока.Пользователь = "Администратор";
			НоваяСтрока.Пароль = "469777";
		Иначе	
			Если СтрНайти(Путь,"Aura")>0 ИЛИ СтрНайти(Путь,"Dauriya")>0 ИЛИ СтрНайти(Путь,"Graciya")>0
				ИЛИ СтрНайти(Путь,"Lekar")>0 ИЛИ СтрНайти(Путь,"Medeya")>0 ИЛИ СтрНайти(Путь,"Eskulap")>0
				ИЛИ СтрНайти(Путь,"Titan")>0 Тогда
				НоваяСтрока.Пользователь = "Бухгалтер";
				НоваяСтрока.Пароль = "2608"; 
			ИначеЕсли СтрНайти(Путь,"Verona")>0 Тогда
				НоваяСтрока.Пользователь = "Бухгалтер";
				НоваяСтрока.Пароль = "";
			ИначеЕсли СтрНайти(Путь,"Farmalain")>0 Тогда
				НоваяСтрока.Пользователь = "Бухгалтер";
				НоваяСтрока.Пароль = "23580";
			ИначеЕсли СтрНайти(Путь,"db22")>0 Тогда    
				НоваяСтрока.Пользователь = "Exchange";
				НоваяСтрока.Пароль = "Exchange"; 	
			ИначеЕсли СтрНайти(Путь,"192.168.201.14")>0 Тогда    
				НоваяСтрока.Пользователь = "Администратор";
				НоваяСтрока.Пароль = "469777"; 
			Иначе
				НоваяСтрока.Пользователь = "";
				НоваяСтрока.Пароль = "";
			КонецЕсли
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаИБ.Сортировать("Имя");
	
	ЗначениеВДанныеФормы(ТаблицаИБ, ТаблицаПути);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиВХранилище()
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиВыгрузкиВ77", "ТаблицаНастроекПоСчетамУчета",ТаблицаНастроекПоСчетамУчета.Выгрузить());
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиВыгрузкиВ77", "ТаблицаНастроекРасшафровкаПП",ТаблицаНастроекРасшафровкаПП.Выгрузить());
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиВыгрузкиВ77", "ТаблицаНастроекПоступлениеУслуг",ТаблицаНастроекПоступлениеУслуг.Выгрузить());
КонецПроцедуры	

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)  
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройкиВХранилище();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеИз77(Команда)
	
	БазаOLE = ПодключитьБазу77();
	
	Если БазаOLE = Неопределено Тогда
		Сообщить("Не удалось подключиться к базе 1с7");  
		Возврат;
	Иначе
		Состояние("База 1с7 подключена");
	КонецЕсли;
	
	СписокВыбораСчетов = Новый Массив;// 
	OLE_Счет = БазаOLE.CreateObject("Счет");
	OLE_Счет.ВыбратьСчета();
	Пока OLE_Счет.ПолучитьСчет()=1 Цикл
		Если OLE_Счет.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;
		СписокВыбораСчетов.Добавить(""+OLE_Счет.Код);
	КонецЦикла;   
	Элементы.ТаблицаНастроекПоСчетамУчетаСчет77.СписокВыбора.ЗагрузитьЗначения(СписокВыбораСчетов);
	Элементы.ТаблицаНастроекПоступлениеУслугСчетЗатрат77.СписокВыбора.ЗагрузитьЗначения(СписокВыбораСчетов);
	
	
	СписокВыбораСтатьяЗатрат = Новый Массив;
	OLE_СтатьиИздержекОбращения = БазаOLE.CreateObject("Справочник.СтатьиИздержекОбращения"); 
	OLE_СтатьиИздержекОбращения.ВыбратьЭлементы();
	Пока OLE_СтатьиИздержекОбращения.ПолучитьЭлемент()=1 Цикл
		Если OLE_СтатьиИздержекОбращения.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;
		СписокВыбораСтатьяЗатрат.Добавить(""+OLE_СтатьиИздержекОбращения.Наименование);
	КонецЦикла; 
	Элементы.ТаблицаНастроекПоСчетамУчетаСтатьяЗатрат.СписокВыбора.ЗагрузитьЗначения(СписокВыбораСтатьяЗатрат);
	Элементы.ТаблицаНастроекПоступлениеУслугСтатьяЗатрат77.СписокВыбора.ЗагрузитьЗначения(СписокВыбораСтатьяЗатрат);
	
	ПроверитьАктуальностьДокументовВ77(БазаOLE);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДокументовВ77(OLE_База) Экспорт
		//OLE_База = ПодключитьБазу77();
		OLE_ОказаниеУслуг = OLE_База.CreateObject("Документ.ОказаниеУслуг");
		OLE_УслугиСтороннихОрганизаций = OLE_База.CreateObject("Документ.УслугиСтороннихОрганизаций");
		OLE_ДокОперация = OLE_База.CreateObject("Документ.Операция");
		
		Для каждого Стр Из СписокРеализаций Цикл
			Если Стр.НомерДата_77<>"Не выгружен" Тогда
				мНомер = СокрЛП(Стр.НомерДата_77);
				Если OLE_ОказаниеУслуг.НайтиПоНомеру(мНомер, ПолучитьЗначениеРеквизитаНаСервере(Стр.Ссылка, "Дата")) = 1 Тогда 
					Если OLE_ОказаниеУслуг.ПометкаУдаления()=1 Тогда
						ИзменитьПризнакДокументВыгружен(Стр.Ссылка, "", "");
						Сообщить("В базе 1С77 документ с номером "+мНомер + " ПОМЕЧЕН НА УДАЛЕНИЕ!!!");
					КонецЕсли;
				иначе
					ИзменитьПризнакДокументВыгружен(Стр.Ссылка, "", "");
					Сообщить("В базе 1С77 документ с номером "+мНомер + " НЕ НАЙДЕН!!!");
				КонецЕсли;
				
			иначе	
				
				мНомер = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(Стр.Ссылка, "Номер"));	
				Если СтрДлина(мНомер)>10 Тогда
					мНомер = СтрЗаменить(мНомер,"-0","-");
				КонецЕсли;   
				
				Если OLE_ОказаниеУслуг.НайтиПоНомеру(мНомер, ПолучитьЗначениеРеквизитаНаСервере(Стр.Ссылка, "Дата")) = 1 Тогда 
					Если OLE_ОказаниеУслуг.ПометкаУдаления()=1 Тогда
						ИзменитьПризнакДокументВыгружен(Стр.Ссылка, "", "");
						Сообщить("В базе 1С77 документ с номером "+мНомер + " ПОМЕЧЕН НА УДАЛЕНИЕ!!!");
					иначе
						ИзменитьПризнакДокументВыгружен(Стр.Ссылка, мНомер, ПолучитьЗначениеРеквизитаНаСервере(Стр.Ссылка, "Дата"));
						Сообщить("В базе 1С77 уже есть документ с номером "+мНомер);  
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
			
		Для каждого Стр Из СписокБанковскиеВыписки Цикл
			Если Стр.НомерДата_77<>"Не выгружен" Тогда
				мНомер = СокрЛП(Стр.НомерДата_77);
				Если OLE_ДокОперация.НайтиПоНомеру(мНомер, ПолучитьЗначениеРеквизитаНаСервере(Стр.Ссылка, "Дата")) = 1 Тогда 
					Если OLE_ДокОперация.ПометкаУдаления()=1 Тогда
						ИзменитьПризнакДокументВыгружен(Стр.Ссылка, "", "");
						Сообщить("В базе 1С77 документ с номером "+мНомер + " ПОМЕЧЕН НА УДАЛЕНИЕ!!!");
					КонецЕсли;
				иначе
					ИзменитьПризнакДокументВыгружен(Стр.Ссылка, "", "");
					Сообщить("В базе 1С77 документ с номером "+мНомер + " НЕ НАЙДЕН!!!");
				КонецЕсли;
				
			КонецЕсли;
 		КонецЦикла;
		
		
		Для каждого Стр Из СписокПоступленийУслуг Цикл
			Если Стр.НомерДата_77<>"Не выгружен" Тогда
				мНомер = СокрЛП(Стр.НомерДата_77);
				Если OLE_УслугиСтороннихОрганизаций.НайтиПоНомеру(мНомер, ПолучитьЗначениеРеквизитаНаСервере(Стр.Ссылка, "Дата")) = 1 Тогда 
					Если OLE_УслугиСтороннихОрганизаций.ПометкаУдаления()=1 Тогда
						ИзменитьПризнакДокументВыгружен(Стр.Ссылка, "", "");
						Сообщить("В базе 1С77 документ с номером "+мНомер + " ПОМЕЧЕН НА УДАЛЕНИЕ!!!");
					КонецЕсли;
				иначе
					ИзменитьПризнакДокументВыгружен(Стр.Ссылка, "", "");
					Сообщить("В базе 1С77 документ с номером "+мНомер + " НЕ НАЙДЕН!!!");
				КонецЕсли;
				
			иначе	
				
				мНомер = СокрЛП(ПолучитьЗначениеРеквизитаНаСервере(Стр.Ссылка, "Номер"));	
				Если СтрДлина(мНомер)>10 Тогда
					мНомер = СтрЗаменить(мНомер,"-0","-");
				КонецЕсли;   
				
				Если OLE_УслугиСтороннихОрганизаций.НайтиПоНомеру(мНомер, ПолучитьЗначениеРеквизитаНаСервере(Стр.Ссылка, "Дата")) = 1 Тогда 
					Если OLE_УслугиСтороннихОрганизаций.ПометкаУдаления()=1 Тогда
						ИзменитьПризнакДокументВыгружен(Стр.Ссылка, "", "");
						Сообщить("В базе 1С77 документ с номером "+мНомер + " ПОМЕЧЕН НА УДАЛЕНИЕ!!!");
					иначе
						ИзменитьПризнакДокументВыгружен(Стр.Ссылка, мНомер, ПолучитьЗначениеРеквизитаНаСервере(Стр.Ссылка, "Дата"));
						Сообщить("В базе 1С77 уже есть документ с номером "+мНомер);  
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьШаблонНаСервере(МассивСтр)
	
	Для каждого СтрМ Из МассивСтр Цикл                          
		Подразделение = Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию(СтрМ.Подразделение);
		Если ЗначениеЗаполнено(Подразделение) Тогда  
			
			МенеджерЗаписи = РегистрыСведений.Расш7_ШаблоныДляПодстановкиПодразделения.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Шаблон = СтрМ.Шаблон;
			МенеджерЗаписи.Подразделение = Подразделение;
			МенеджерЗаписи.ВидДвижяния = Перечисления.Расш7_ВидДвижения.Приход_Расход;
			МенеджерЗаписи.Записать();		
			//Сообщить("Найдено "+СтрМ.Подразделение);
		иначе
			Сообщить("!!!Не найдено "+СтрМ.Подразделение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьШаблон(Команда)
	БазаOLE = ПодключитьБазу77();
	
	Если БазаOLE = Неопределено Тогда
		Сообщить("Не удалось подключиться к базе 1с7");  
		Возврат;
	Иначе
		Состояние("База 1с7 подключена");
	КонецЕсли; 
	
	ТабШаблон = БазаOLE.CreateObject("ТаблицаЗначений");
	ТабШаблон.НоваяКолонка("ПриходРасход"); 
	ТабШаблон.НоваяКолонка("НазначениеПлатежа");        
	ТабШаблон.НоваяКолонка("ДвижениеДенежныхСредств");        
	ТабШаблон.НоваяКолонка("Счет");        
	ТабШаблон.НоваяКолонка("Субконто1");        
	ТабШаблон.НоваяКолонка("Субконто2");        
	ТабШаблон.НоваяКолонка("Субконто3");    
	
	БазаOLE.ЗначениеИзФайла(БазаOLE.КаталогИБ()+"ШаблонБанк.txt",ТабШаблон,1);
	
	МассивСтр = Новый Массив;
	ТабШаблон.ВыбратьСтроки();
	Пока ТабШаблон.ПолучитьСтроку()=1 Цикл
		Поз=СтрНайти(ВРег(ТабШаблон.НазначениеПлатежа),ВРег("Мерчант")); 
		Если Поз>0 Тогда                                           
			СтрМерчант=Сред(ТабШаблон.НазначениеПлатежа,Поз);
			Поз1=СтрНайти(СтрМерчант,"№"); 
			Если Поз1>0 Тогда                                           
				НСтр = Новый Структура;
				Поз2=СтрНайти(СтрМерчант,"."); 
				НомерТерминала=СокрЛП(Сред(СтрМерчант,Поз1+1,Поз2-Поз1-1));
				Сообщить(""+ТабШаблон.НазначениеПлатежа);
				Сообщить(""+НомерТерминала);
				Сообщить(""+ТабШаблон.Субконто1.Подразделение.Наименование); 
				НСтр.Вставить("Шаблон",НомерТерминала); 
				НСтр.Вставить("Подразделение",ТабШаблон.Субконто1.Подразделение.Наименование); 
				МассивСтр.Добавить(НСтр);
			Конецесли;
		Конецесли;
		
	КонецЦикла;	
	
	ЗагрузитьШаблонНаСервере(МассивСтр);
	
КонецПроцедуры

#КонецОбласти
